import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Image,
  Alert,
  Platform,
  ActivityIndicator,
  Modal,
  Switch,
  AppState,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { EditProfileModal } from '../../components/profile/EditProfileModal';
import AppLanguageSelector from '../../components/profile/AppLanguageSelector';
import { FeedbackModal } from '../../components/profile/FeedbackModal';
import { DeleteAccountModal } from '../../components/profile/DeleteAccountModal';
import { ShareAppModal } from '../../components/profile/ShareAppModal';

import { UserService } from '../../services/userService';
import { useVocabulary } from '../../context/VocabularyContext';
import { useShowList } from '../../context/ShowListContext';
import { wordService } from '../../services/wordService';
import { colors } from '../../constants/colors';
import { useNavigation } from '../../components/navigation/NavigationContext';
import { useAuth } from '../../context/AuthContext';
import { useAppLanguage } from '../../context/AppLanguageContext';
import { t } from '../../constants/translations';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { LearningStatsSection } from '../../components/learning/LearningStatsSection';
import SubscriptionScreen from './SubscriptionScreen';
import notificationService, { NotificationPreferences } from '../../services/notificationService';
import { learningDataService } from '../../services/learningDataService';
import { LearningStatsService } from '../../services/learningStatsService';
import { unifiedSyncService } from '../../services/unifiedSyncService';
import { cacheService, CACHE_KEYS } from '../../services/cacheService';
import { getAboutUsContent } from '../../utils/aboutUsContent';
import { normalizeImageUrl } from '../../utils/imageUrlHelper';
import DataSyncIndicator from '../../components/common/DataSyncIndicator';
import { clearDataService } from '../../services/clearDataService';
import { subscriptionService } from '../../services/subscriptionService';
import { guestIdService } from '../../services/guestIdService';
import { BadgeEntrySection, useBadges } from '../../features/badges';
import FeatureAccessService from '../../services/featureAccessService';
import { UpgradeModal } from '../../components/common/UpgradeModal';
import { AppleCrossDeviceSyncService } from '../../services/appleCrossDeviceSyncService';



interface UserStats {
  totalWords: number;
  masteredWords: number;
  learningDays: number;
  currentStreak: number;
  totalReviews: number;
  accuracy: number;
}

interface ProfileScreenProps {
  onLogout?: () => void;
  onEditProfile?: () => void;
  openLanguageSettings?: boolean;
}

export const ProfileScreen: React.FC<ProfileScreenProps> = ({
  onLogout,
  onEditProfile,
  openLanguageSettings = false,
}) => {
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [darkModeEnabled, setDarkModeEnabled] = useState(false);
  const [loading, setLoading] = useState(true);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [languageModalVisible, setLanguageModalVisible] = useState(false);
  const [clearingCache, setClearingCache] = useState(false);
  const [aboutModalVisible, setAboutModalVisible] = useState(false);
  const [feedbackModalVisible, setFeedbackModalVisible] = useState(false);
  const [deleteAccountModalVisible, setDeleteAccountModalVisible] = useState(false);
  const [shareAppModalVisible, setShareAppModalVisible] = useState(false);
  const [subscriptionStatus, setSubscriptionStatus] = useState<any>(null);
  const [upgradeModalVisible, setUpgradeModalVisible] = useState(false);
  const [lockedFeature, setLockedFeature] = useState<string | null>(null);
  const [crossDeviceSyncStatus, setCrossDeviceSyncStatus] = useState<any>(null);


  const { vocabulary, clearVocabulary } = useVocabulary();
  const { shows, clearShows } = useShowList();
  const { navigate } = useNavigation();
  const { user, loginType, isAuthenticated, logout: authLogout, login, updateUser } = useAuth();
  const { appLanguage } = useAppLanguage();
  const userService = UserService.getInstance();
  
  // ÂæΩÁ´†Á≥ªÁªü
  const { badges, userProgress, loading: badgesLoading } = useBadges(user?.id || 'guest');

  // Ëá™Âä®ÊâìÂºÄËØ≠Ë®ÄËÆæÁΩÆ
  useEffect(() => {
    if (openLanguageSettings) {
      setLanguageModalVisible(true);
    }
  }, [openLanguageSettings]);

  // Âä†ËΩΩË∑®ËÆæÂ§áÂêåÊ≠•Áä∂ÊÄÅ
  useEffect(() => {
    if (loginType === 'apple') {
      loadCrossDeviceSyncStatus();
    }
  }, [loginType]);

  // Âä†ËΩΩË∑®ËÆæÂ§áÂêåÊ≠•Áä∂ÊÄÅ
  const loadCrossDeviceSyncStatus = async () => {
    try {
      const crossDeviceService = AppleCrossDeviceSyncService.getInstance();
      const status = crossDeviceService.getSyncStatus();
      setCrossDeviceSyncStatus(status);
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩË∑®ËÆæÂ§áÂêåÊ≠•Áä∂ÊÄÅÂ§±Ë¥•:', error);
    }
  };

  // ÂàùÂßãÂåñËÆ¢ÈòÖÊúçÂä°
  useEffect(() => {
    const initializeSubscription = async () => {
      try {
        await subscriptionService.initialize();
        const status = await subscriptionService.checkSubscriptionStatus();
        setSubscriptionStatus(status);
        
        // Ê≥®ÂÜåÁä∂ÊÄÅÂèòÂåñÂõûË∞É
        const unsubscribe = subscriptionService.registerStateCallback((newStatus) => {
          setSubscriptionStatus(newStatus);
        });
        
        return unsubscribe;
      } catch (error) {
        console.error('[ProfileScreen] ËÆ¢ÈòÖÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•:', error);
      }
    };

    initializeSubscription();
  }, []);

  // Ëé∑ÂèñÁî®Êà∑Â§¥ÂÉè
  const getUserAvatar = () => {
    console.log('üîç getUserAvatar Ë∞ÉËØï‰ø°ÊÅØ:', {
      user: user,
      loginType: loginType,
      isAuthenticated: isAuthenticated,
      hasUserAvatar: !!(user?.avatar && user.avatar !== ''),
      userAvatarUrl: user?.avatar
    });

    // Â¶ÇÊûúÁî®Êà∑ÊúâËá™ÂÆö‰πâÂ§¥ÂÉèÔºå‰ºòÂÖà‰ΩøÁî®
    if (user?.avatar && user.avatar !== '') {
      const normalizedAvatarUrl = normalizeImageUrl(user.avatar);
      console.log('üîç ‰ΩøÁî®Áî®Êà∑Ëá™ÂÆö‰πâÂ§¥ÂÉè:', normalizedAvatarUrl);
      return { uri: normalizedAvatarUrl };
    }

    if (!user || !loginType) {
      // ËøîÂõûÊú¨Âú∞ÈªòËÆ§Ê∏∏ÂÆ¢Â§¥ÂÉè
      console.log('üîç ‰ΩøÁî®ÈªòËÆ§Ê∏∏ÂÆ¢Â§¥ÂÉè - ÂéüÂõ†: Êó†Áî®Êà∑ÊàñÊó†ÁôªÂΩïÁ±ªÂûã');
      return require('../../../assets/images/guest-avatar.png');
    }

    // Ê†πÊçÆÁôªÂΩïÁ±ªÂûãËøîÂõû‰∏çÂêåÁöÑÈªòËÆ§Â§¥ÂÉè
    switch (loginType) {
      case 'wechat':
        console.log('üîç ‰ΩøÁî®ÂæÆ‰ø°Â§¥ÂÉè');
        return require('../../../assets/images/wechat-avatar.png');
      case 'apple':
        console.log('üîç ‰ΩøÁî®ËãπÊûúÂ§¥ÂÉè');
        return require('../../../assets/images/apple-avatar.png');
      case 'phone':
        console.log('üîç ‰ΩøÁî®ÊâãÊú∫Â§¥ÂÉè');
        return require('../../../assets/images/phone-avatar.png');
      case 'guest':
      default:
        // ËøîÂõûÊú¨Âú∞ÈªòËÆ§Ê∏∏ÂÆ¢Â§¥ÂÉè
        console.log('üîç ‰ΩøÁî®Ê∏∏ÂÆ¢Â§¥ÂÉè - ÂéüÂõ†: ÁôªÂΩïÁ±ªÂûã‰∏∫', loginType);
        return require('../../../assets/images/guest-avatar.png');
    }
  };

  // Ëé∑ÂèñÁî®Êà∑ÊòµÁß∞
  const getUserNickname = () => {
    if (!user || !loginType) {
      // ‰∏∫Ê∏∏ÂÆ¢ÁîüÊàêÁÆÄÂçïÁöÑID
      return 'Guest';
    }

    // Ê∏∏ÂÆ¢Áî®Êà∑Áõ¥Êé•ÊòæÁ§∫Áî®Êà∑ID
    if (loginType === 'guest' && user.nickname) {
      return user.nickname; // ËøôÈáåÊòæÁ§∫ÁöÑÊòØÁî®Êà∑ID
    }

    if (user.nickname) {
      return user.nickname;
    }

    switch (loginType) {
      case 'wechat':
        return t('wechat_user', appLanguage);
      case 'apple':
        return t('apple_user', appLanguage);
      case 'phone':
        return t('phone_user', appLanguage);
      case 'guest':
      default:
        // Ê∏∏ÂÆ¢Ê®°Âºè‰ΩøÁî®Áªü‰∏ÄÁöÑÊúçÂä°
        return 'Guest';
    }
  };

  // Ëé∑Âèñ‰ºöÂëòÁä∂ÊÄÅ‰ø°ÊÅØ
  const getMembershipInfo = () => {
    if (!subscriptionStatus) return null;

    if (subscriptionStatus.isActive) {
      // ‰ªòË¥π‰ºöÂëò
      const planType = subscriptionStatus.productId?.includes('monthly') ? 'Monthly' : 
                      subscriptionStatus.productId?.includes('quarterly') ? 'Quarterly' :
                      subscriptionStatus.productId?.includes('yearly') ? 'Yearly' : 'Premium';
      
      // ËÆ°ÁÆóÂà∞ÊúüÊó•Êúü - ÂÅáËÆæ‰ªéÂΩìÂâçÊó∂Èó¥ÂºÄÂßãËÆ°ÁÆó
      const now = new Date();
      let expiryDate = new Date();
      if (subscriptionStatus.productId?.includes('monthly')) {
        expiryDate.setMonth(now.getMonth() + 1);
      } else if (subscriptionStatus.productId?.includes('quarterly')) {
        expiryDate.setMonth(now.getMonth() + 3);
      } else if (subscriptionStatus.productId?.includes('yearly')) {
        expiryDate.setFullYear(now.getFullYear() + 1);
      }
      
      const formattedDate = expiryDate.toLocaleDateString(appLanguage === 'zh-CN' ? 'zh-CN' : 'en-US', {
        year: 'numeric',
        month: appLanguage === 'zh-CN' ? 'long' : 'short',
        day: 'numeric'
      });

      return {
        type: 'premium',
        duration: planType,
        expiryDate: formattedDate
      };
    } else if (subscriptionStatus.isTrial && subscriptionStatus.trialEndsAt) {
      // ËØïÁî®‰ºöÂëò
      const timeLeft = new Date(subscriptionStatus.trialEndsAt).getTime() - new Date().getTime();
      const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
      
      const formattedDate = new Date(subscriptionStatus.trialEndsAt).toLocaleDateString(appLanguage === 'zh-CN' ? 'zh-CN' : 'en-US', {
        year: 'numeric',
        month: appLanguage === 'zh-CN' ? 'long' : 'short',
        day: 'numeric'
      });

      return {
        type: 'trial',
        duration: `${daysLeft} ${appLanguage === 'zh-CN' ? 'Â§©' : 'days'}`,
        expiryDate: formattedDate
      };
    }

    return null;
  };



  // Ê®°ÊãüÁî®Êà∑Êï∞ÊçÆÔºàÂΩìÁúüÂÆûÊï∞ÊçÆÊú™Âä†ËΩΩÊó∂‰ΩøÁî®Ôºâ
  const defaultUserData = {
    nickname: 'Â≠¶‰π†Ëææ‰∫∫',
    avatar: 'https://via.placeholder.com/80',
    email: 'user@example.com',
    joinDate: '2024Âπ¥1Êúà',
    level: t('intermediate_learner', appLanguage),
    loginType: 'guest',
  };

  // Ëé∑ÂèñÁî®Êà∑Êï∞ÊçÆ
  useEffect(() => {
    setLoading(false);
    loadNotificationPreferences();
    
    // ËÆæÁΩÆAPPÂÖ≥Èó≠Êó∂ÂêåÊ≠•
    setupAppCloseSync();
  }, []);

  // ÁõëÂê¨ AuthContext Áä∂ÊÄÅÂèòÂåñ
  useEffect(() => {
    console.log('üîç ProfileScreen AuthContext Áä∂ÊÄÅÂèòÂåñ:', {
      user: user,
      loginType: loginType,
      isAuthenticated: isAuthenticated
    });
  }, [user, loginType, isAuthenticated]);

  // ÂΩìÂ∫îÁî®ËØ≠Ë®ÄÊîπÂèòÊó∂ÔºåÊõ¥Êñ∞ÈÄöÁü•ÊúçÂä°ÁöÑËØ≠Ë®ÄËÆæÁΩÆ
  useEffect(() => {
    notificationService.setAppLanguage(appLanguage);
  }, [appLanguage]);

  // Âä†ËΩΩÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆ
  const loadNotificationPreferences = async () => {
    try {
      const preferences = await notificationService.loadNotificationPreferences();
      setNotificationsEnabled(preferences.notificationsEnabled);
      console.log('üì± ÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆÂ∑≤Âä†ËΩΩÂà∞UI');
    } catch (error) {
      console.error('‚ùå Âä†ËΩΩÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆÂ§±Ë¥•:', error);
    }
  };

  // ‰øùÂ≠òÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆ - ÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°à
  const saveNotificationPreferences = async (preferences: NotificationPreferences) => {
    try {
      // ÂÖà‰øùÂ≠òÂà∞Êú¨Âú∞
      await notificationService.saveNotificationPreferences(preferences);
      console.log('üíæ ÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆÂ∑≤‰øùÂ≠òÂà∞Êú¨Âú∞');
      
      // ÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°àÂêåÊ≠•Âà∞‰∫ëÁ´Ø
      if (user?.id) {
        await unifiedSyncService.addToSyncQueue({
          type: 'userSettings',
          data: {
            notificationPreferences: preferences,
            lastUpdated: Date.now()
          },
          userId: user.id,
          operation: 'update',
          priority: 'medium'
        });
        
        console.log('üîÑ ÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆÂ∑≤Âä†ÂÖ•ÂêåÊ≠•ÈòüÂàó');
      }
    } catch (error) {
      console.error('‚ùå ‰øùÂ≠òÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆÂ§±Ë¥•:', error);
    }
  };

  // Ê®°ÊãüÁªüËÆ°Êï∞ÊçÆ
  const stats: UserStats = {
    totalWords: 1250,
    masteredWords: 890,
    learningDays: 45,
    currentStreak: 12,
    totalReviews: 3200,
    accuracy: 87,
  };

  // ÊÅ¢Â§çÁôªÂΩïÂäüËÉΩ
  const handleLoginPress = () => {
    // Ê∏∏ÂÆ¢Ê®°Âºè‰∏ãÔºå‰º†ÈÄíÂçáÁ∫ßÊ†áËÆ∞
    const isGuest = !isAuthenticated || !user || loginType === 'guest';
    if (isGuest) {
      navigate('login', { upgradeFromGuest: true });
    } else {
      navigate('login');
    }
  };



  const renderUserInfo = () => {
    // ÂΩìÂâçÁâàÊú¨‰ΩøÁî®Ëá™Âä®ÁîüÊàêÁöÑÊ∏∏ÂÆ¢IDÔºåÊó†ÈúÄÁôªÂΩïÊåâÈíÆ
    const isGuest = !isAuthenticated || !user || loginType === 'guest';

    
    return (
      <View style={styles.userSection}>
        <View style={styles.userHeader}>
          <Image
            key={`avatar-${loginType}-${isAuthenticated}`}
            source={getUserAvatar()}
            style={styles.avatar}
          />
          <View style={styles.userDetails}>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Text style={styles.userName}>{getUserNickname()}</Text>
              {/* VIPÁöáÂÜ†ÂõæÊ†á - ‰ªÖÂØπ‰ªòË¥π‰ºöÂëòÊòæÁ§∫ */}
              {subscriptionStatus?.isActive && (
                <View style={styles.vipCrownContainer}>
                  <Ionicons 
                    name="diamond" 
                    size={18} 
                    color="#FFD700" 
                    style={styles.vipCrownIcon}
                  />
                </View>
              )}
              <View style={{ marginLeft: 8 }}>
                <DataSyncIndicator visible={true} showDetails={false} />
              </View>
              <TouchableOpacity style={styles.editButtonInline} onPress={handleEditProfile}>
                <Ionicons name="pencil" size={16} color={colors.primary[500]} />
              </TouchableOpacity>
            </View>

            {/* ‰ºöÂëòÊó∂Êïà‰ø°ÊÅØ */}
            {getMembershipInfo() && (
              <View style={styles.membershipInfoContainer}>
                <Text style={styles.membershipInfo}>
                  {getMembershipInfo()?.type === 'premium' 
                    ? `${getMembershipInfo()?.duration} ${appLanguage === 'zh-CN' ? '‰ºöÂëò' : 'Member'}`
                    : `${getMembershipInfo()?.duration} ${appLanguage === 'zh-CN' ? 'ËØïÁî®Ââ©‰Ωô' : 'trial remaining'}`
                  } ‚Ä¢ {appLanguage === 'zh-CN' ? 'Âà∞ÊúüÊó•' : 'Expires'}: {getMembershipInfo()?.expiryDate}
                </Text>
              </View>
            )}

            {/* Ê∏∏ÂÆ¢Ê®°ÂºèÊèêÈÜí */}
            {isGuest && (
              <Text style={styles.guestReminder}>
                {appLanguage === 'zh-CN' 
                  ? 'Ê≥®ÂÜåÂç≥ÂèØÂêåÊ≠•ËøõÂ∫¶ÔºåËß£ÈîÅÊõ¥Â§öÂäüËÉΩ' 
                  : 'Sign up to sync progress & unlock features'
                }
              </Text>
            )}

            {!isGuest && (
              <Text style={styles.userEmail}>{user?.email || 'user@example.com'}</Text>
            )}
            
            {/* Âéü‰ΩçÁΩÆÁöÑÊåáÁ§∫Âô®ÁßªÈô§ÔºåÂ∑≤ÁßªÂä®Âà∞Áî®Êà∑ÂêçÂêé */}
            
            {/* ÁôªÂΩï/ÈÄÄÂá∫ÁôªÂΩïÊåâÈíÆ - Â∑≤ÊÅ¢Â§ç */}
                          {isGuest ? (
               <TouchableOpacity 
                 style={styles.loginButton} 
                 onPress={handleLoginPress}
                 activeOpacity={0.8}
               >
                 <Ionicons name="log-in-outline" size={16} color={colors.primary[600]} />
                 <Text style={styles.loginButtonText}>{t('login', appLanguage)}</Text>
               </TouchableOpacity>
              ) : (
              <TouchableOpacity 
                style={styles.loginButton} 
                onPress={authLogout}
                activeOpacity={0.8}
              >
                <Ionicons name="log-out-outline" size={16} color={colors.primary[600]} />
                <Text style={styles.loginButtonText}>{t('logout', appLanguage)}</Text>
              </TouchableOpacity>
            )}
          </View>

        </View>
      </View>
    );
  };

  const renderSettings = () => (
    <View style={styles.settingsSection}>
      <Text style={styles.sectionTitle}>{t('settings', appLanguage)}</Text>
      
      {/* Êé®ÈÄÅÈÄöÁü•ËÆæÁΩÆ */}
      <View style={styles.settingItem}>
        <View style={styles.settingLeft}>
          <Ionicons name="notifications-outline" size={24} color={colors.primary[500]} />
          <Text style={styles.settingLabel}>{t('push_notifications', appLanguage)}</Text>
        </View>
        <Switch
          value={notificationsEnabled}
          onValueChange={handleNotificationToggle}
          trackColor={{ false: colors.border.light, true: colors.primary[300] }}
          thumbColor={notificationsEnabled ? colors.primary[500] : colors.text.tertiary}
        />
      </View>

      <TouchableOpacity 
        style={styles.settingItem}
        onPress={() => setLanguageModalVisible(true)}
      >
        <View style={styles.settingLeft}>
          <Ionicons name="language-outline" size={24} color={colors.primary[500]} />
          <Text style={styles.settingLabel}>{t('language_settings', appLanguage)}</Text>
        </View>
        <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
      </TouchableOpacity>

      {/* ÂàÜ‰∫´Â∫îÁî® */}
      <TouchableOpacity 
        style={styles.settingItem}
        onPress={() => setShareAppModalVisible(true)}
      >
        <View style={styles.settingLeft}>
          <Ionicons name="share-social-outline" size={24} color={colors.primary[500]} />
          <Text style={styles.settingLabel}>{t('share_app', appLanguage)}</Text>
        </View>
        <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
      </TouchableOpacity>

      {/* Apple IDË∑®ËÆæÂ§áÂêåÊ≠• - ‰ªÖÂØπAppleÁî®Êà∑ÊòæÁ§∫ */}
      {loginType === 'apple' && (
        <TouchableOpacity 
          style={styles.settingItem}
          onPress={() => handleCrossDeviceSync()}
        >
          <View style={styles.settingLeft}>
            <Ionicons name="cloudy-outline" size={24} color={colors.primary[500]} />
            <Text style={styles.settingLabel}>
              {appLanguage === 'zh-CN' ? 'Ë∑®ËÆæÂ§áÂêåÊ≠•' : 'Cross-Device Sync'}
            </Text>
          </View>
          <View style={styles.settingLeft}>
            {crossDeviceSyncStatus?.isSyncing ? (
              <ActivityIndicator size="small" color={colors.primary[500]} />
            ) : (
              <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
            )}
          </View>
        </TouchableOpacity>
      )}

      {/* ËÆ¢ÈòÖÁÆ°ÁêÜ - ‰ªÖÂØπ‰ªòË¥πËÆ¢ÈòÖ‰ºöÂëòÊòæÁ§∫ */}
      {subscriptionStatus?.isActive && (
        <TouchableOpacity 
          style={styles.settingItem}
          onPress={handleGoToSubscription}
        >
          <View style={styles.settingLeft}>
            <Ionicons name="diamond" size={24} color={colors.primary[500]} />
            <Text style={styles.settingLabel}>{t('manage_subscription', appLanguage)}</Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
        </TouchableOpacity>
      )}



      <TouchableOpacity 
        style={styles.settingItem}
        onPress={() => setFeedbackModalVisible(true)}
      >
        <View style={styles.settingLeft}>
          <Ionicons name="chatbubble-ellipses-outline" size={24} color={colors.primary[500]} />
          <Text style={styles.settingLabel}>
            {appLanguage === 'zh-CN' ? 'ÂèçÈ¶àÈóÆÈ¢ò' : 'Feedback'}
          </Text>
        </View>
        <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
      </TouchableOpacity>

      <TouchableOpacity style={styles.settingItem} onPress={() => setAboutModalVisible(true)}>
        <View style={styles.settingLeft}>
          <Ionicons name="information-circle-outline" size={24} color={colors.primary[500]} />
          <Text style={styles.settingLabel}>{t('about_us', appLanguage)}</Text>
        </View>
        <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
      </TouchableOpacity>

      {/* Ê∏ÖÈô§Áî®Êà∑Êï∞ÊçÆ */}
      <TouchableOpacity style={styles.settingItem} onPress={handleClearLocalData}>
        <View style={styles.settingLeft}>
          <Ionicons name="trash-bin-outline" size={24} color={colors.error[500]} />
          <Text style={[styles.settingText, { color: colors.error[500] }]}>
            {appLanguage === 'zh-CN' ? 'Ê∏ÖÈô§Áî®Êà∑Êï∞ÊçÆ' : 'Clear User Data'}
          </Text>
        </View>
        <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
      </TouchableOpacity>



      {/* ÂÆåÂÖ®Ê∏ÖÈô§ÊâÄÊúâÊï∞ÊçÆÔºà‰ªÖÂºÄÂèëÊ®°ÂºèÂèØËßÅÔºâ */}
      {__DEV__ && (
        <TouchableOpacity style={styles.settingItem} onPress={handleClearAllData}>
          <View style={styles.settingLeft}>
            <Ionicons name="trash-outline" size={24} color={colors.error[500]} />
            <Text style={[styles.settingText, { color: colors.error[500] }]}>
              {appLanguage === 'zh-CN' ? 'ÂÆåÂÖ®Ê∏ÖÈô§ÊâÄÊúâÊï∞ÊçÆ' : 'Clear All Data Completely'}
            </Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
        </TouchableOpacity>
      )}

      {/* Ê≥®ÈîÄË¥¶Êà∑ - ‰ªÖÂØπÂ∑≤ÁôªÂΩïÁî®Êà∑ÊòæÁ§∫ */}
      {isAuthenticated && loginType !== 'guest' && (
        <TouchableOpacity style={styles.settingItem} onPress={handleDeleteAccount}>
          <View style={styles.settingLeft}>
            <Ionicons name="person-remove-outline" size={24} color={colors.error[500]} />
            <Text style={[styles.settingText, { color: colors.error[500] }]}>
              {appLanguage === 'zh-CN' ? 'Ê≥®ÈîÄË¥¶Êà∑' : 'Delete Account'}
            </Text>
          </View>
          <Ionicons name="chevron-forward" size={20} color={colors.neutral[500]} />
        </TouchableOpacity>
      )}

      {/* ÂºÄÂèëÊ®°ÂºèÊµãËØïÊåâÈíÆ */}
      {__DEV__ && (
        <View style={styles.devTestSection}>
          <Text style={styles.devTestSectionTitle}>üß™ ÂºÄÂèëÊµãËØï</Text>
          
          {/* ËÆ¢ÈòÖÁä∂ÊÄÅÊµãËØïÊåâÈíÆ */}
          <TouchableOpacity 
            style={styles.devTestButton} 
            onPress={() => handleTestSubscriptionState('trial_expired')}
          >
            <Ionicons name="time" size={20} color={colors.white} />
            <Text style={styles.devTestButtonText}>Ê®°ÊãüËØïÁî®ÊúüÂà∞Êúü</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.devTestButton} 
            onPress={() => handleTestSubscriptionState('premium_monthly')}
          >
            <Ionicons name="diamond" size={20} color={colors.white} />
            <Text style={styles.devTestButtonText}>Ê®°Êãü‰ªòË¥π‰ºöÂëò</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.devTestButton} 
            onPress={() => handleTestSubscriptionState('trial_active')}
          >
            <Ionicons name="refresh" size={20} color={colors.white} />
            <Text style={styles.devTestButtonText}>ÈáçÁΩÆ‰∏∫ËØïÁî®Êúü</Text>
          </TouchableOpacity>

          <TouchableOpacity 
            style={styles.devTestButton} 
            onPress={handleClearTestState}
          >
            <Ionicons name="trash" size={20} color={colors.white} />
            <Text style={styles.devTestButtonText}>Ê∏ÖÈô§ÊµãËØïÁä∂ÊÄÅ</Text>
          </TouchableOpacity>
        </View>
      )}
    </View>
  );

  const handleEditProfile = () => {
    setEditModalVisible(true);
  };

  const handleProfileUpdate = async (updatedUser: any) => {
    console.log('üìù Áî®Êà∑ËµÑÊñôÊõ¥Êñ∞:', updatedUser);
    
    // Êõ¥Êñ∞AuthContext‰∏≠ÁöÑÁî®Êà∑Êï∞ÊçÆ
    if (updatedUser && user) {
      // Á°Æ‰øùupdatedUserÊòØÊâÅÂπ≥ÂåñÁöÑÁî®Êà∑Êï∞ÊçÆÔºå‰∏çÊòØÂµåÂ•óÂØπË±°
      const userData = updatedUser.user || updatedUser;
      
      // ÂêàÂπ∂Áî®Êà∑Êï∞ÊçÆ
      const mergedUser = {
        ...user,
        ...userData
      };
      
      // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®
      userService.saveUserLoginInfo(mergedUser, loginType || 'guest');
      
      // ‰ΩøÁî®AuthContextÁöÑupdateUserÊñπÊ≥ïÊõ¥Êñ∞Áî®Êà∑Êï∞ÊçÆ
      updateUser(userData);
      
      // ÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°àÂêåÊ≠•Áî®Êà∑ËµÑÊñôÂà∞‰∫ëÁ´Ø
      if (user?.id) {
        try {
          await unifiedSyncService.addToSyncQueue({
            type: 'userSettings',
            data: {
              profile: {
                nickname: mergedUser.nickname,
                avatar: mergedUser.avatar,
                email: mergedUser.email,
                lastUpdated: Date.now()
              }
            },
            userId: user.id,
            operation: 'update',
            priority: 'medium'
          });
          
          console.log('üîÑ Áî®Êà∑ËµÑÊñôÂ∑≤Âä†ÂÖ•ÂêåÊ≠•ÈòüÂàó');
        } catch (error: any) {
          console.error('‚ùå Áî®Êà∑ËµÑÊñôÂêåÊ≠•Â§±Ë¥•:', error);
        }
      }
      
      console.log('‚úÖ Áî®Êà∑ËµÑÊñôÊõ¥Êñ∞ÂÆåÊàê');
      
      // Âº∫Âà∂ÈáçÊñ∞Ê∏≤ÊüìProfileÈ°µÈù¢
      // ÈÄöËøáËÆæÁΩÆ‰∏Ä‰∏™Áä∂ÊÄÅÊù•Ëß¶ÂèëÈáçÊñ∞Ê∏≤Êüì
      setLoading(true);
      setTimeout(() => setLoading(false), 100);
    }
    
    setEditModalVisible(false);
  };

  const handleNotificationToggle = async () => {
    if (!notificationsEnabled) {
      // Áî®Êà∑ÊÉ≥Ë¶ÅÂêØÁî®ÈÄöÁü•
      const hasPermission = await notificationService.requestPermissions();
      if (hasPermission) {
        // ÂêØÁî®ÈÄöÁü•Êó∂ÔºåÂêéÂè∞ÊúçÂä°‰ºöËá™Âä®ËÆæÁΩÆÊâÄÊúâÂ≠êÈÄöÁü•
        const newPreferences: NotificationPreferences = {
          notificationsEnabled: true,
          dailyReminder: true,
          weeklyReminder: true,
          motivationReminder: true,
          streakReminder: true,
        };
        setNotificationsEnabled(true);
        await saveNotificationPreferences(newPreferences);
        
        // Âè™‰øùÂ≠òÁî®Êà∑ÂÅèÂ•ΩÔºå‰∏çÁ´ãÂç≥ËÆæÁΩÆ‰ªª‰ΩïÈÄöÁü•
        // ÈÄöÁü•‰ºöÂú®ÈÄÇÂΩìÁöÑÊó∂ÂÄôËá™Âä®Ëß¶ÂèëÔºåÈÅøÂÖçÁ´ãÂç≥Êé®ÈÄÅ
      } else {
        Alert.alert(
          appLanguage === 'zh-CN' ? 'ÈúÄË¶ÅÈÄöÁü•ÊùÉÈôê' : 'Notification Permission Required',
          appLanguage === 'zh-CN' ? 'ÊùÉÈôêË¢´ÊãíÁªù' : 'Permission Denied',
          [{ text: t('ok', appLanguage) }]
        );
      }
    } else {
      // Áî®Êà∑ÊÉ≥Ë¶ÅÁ¶ÅÁî®ÈÄöÁü•
      const newPreferences: NotificationPreferences = {
        notificationsEnabled: false,
        dailyReminder: false,
        weeklyReminder: false,
        motivationReminder: false,
        streakReminder: false,
      };
      setNotificationsEnabled(false);
      await saveNotificationPreferences(newPreferences);
      await notificationService.cancelAllNotifications();
    }
  };

  const handleClearCache = async () => {
    setClearingCache(true);
    try {
      // Ê∏ÖÈô§ AsyncStorage ‰∏≠ÁöÑÁºìÂ≠òÊï∞ÊçÆ
      const keys = await AsyncStorage.getAllKeys();
      const cacheKeys = keys.filter(key => 
        key.includes('cache') || 
        key.includes('temp') || 
        key.includes('search_history')
      );
      
      if (cacheKeys.length > 0) {
        await AsyncStorage.multiRemove(cacheKeys);
        Alert.alert('Ê∏ÖÈô§ÊàêÂäü', 'ÁºìÂ≠òÊï∞ÊçÆÂ∑≤Ê∏ÖÈô§');
      } else {
        Alert.alert('ÊèêÁ§∫', 'Ê≤°ÊúâÊâæÂà∞ÈúÄË¶ÅÊ∏ÖÈô§ÁöÑÁºìÂ≠òÊï∞ÊçÆ');
      }
    } catch (error) {
      console.error('Ê∏ÖÈô§ÁºìÂ≠òÂ§±Ë¥•:', error);
      Alert.alert('Ê∏ÖÈô§Â§±Ë¥•', 'Ê∏ÖÈô§ÁºìÂ≠òÊó∂ÂèëÁîüÈîôËØØ');
    } finally {
      setClearingCache(false);
    }
  };

  // Ê∏ÖÈô§Êú¨Âú∞Â≠òÂÇ®ÁöÑÊâÄÊúâÊï∞ÊçÆ
  const handleClearLocalData = async () => {
    Alert.alert(
      appLanguage === 'zh-CN' ? 'Ê∏ÖÈô§Áî®Êà∑Êï∞ÊçÆ' : 'Clear User Data',
      appLanguage === 'zh-CN' 
        ? 'ËøôÂ∞ÜÂà†Èô§Ôºö\n‚Ä¢ ÂéÜÂè≤ÊêúÁ¥¢Êï∞ÊçÆ\n‚Ä¢ ÂâßÂçï\n‚Ä¢ ÂçïËØçÊú¨\n‚Ä¢ Â∑≤ÂÇ®Â≠òÁöÑÂçïËØç\n\n‰ΩÜ‰ºö‰øùÁïôÔºö\n‚Ä¢ ÁªèÈ™åÊï∞ÊçÆ\n‚Ä¢ Â≠¶‰π†Êï∞ÊçÆ\n\nÁ°ÆÂÆöË¶ÅÁªßÁª≠ÂêóÔºü'
        : 'This will delete:\n‚Ä¢ Search history\n‚Ä¢ Shows\n‚Ä¢ Vocabulary\n‚Ä¢ Saved words\n\nBut will keep:\n‚Ä¢ Experience data\n‚Ä¢ Learning data\n\nAre you sure you want to continue?',
      [
        { text: t('cancel', appLanguage), style: 'cancel' },
        { 
          text: t('confirm', appLanguage), 
          style: 'destructive', 
          onPress: async () => {
            try {
              console.log('üóëÔ∏è ÂºÄÂßãÊ∏ÖÈô§Áî®Êà∑Êï∞ÊçÆÔºà‰øùÁïôÁªèÈ™åÂíåÂ≠¶‰π†Êï∞ÊçÆÔºâ...');
              
              // Ê∏ÖÈô§ËØçÊ±áÊï∞ÊçÆ
              await clearVocabulary();
              
              // Ê∏ÖÈô§ÂâßÈõÜÊï∞ÊçÆ
              await clearShows();
              
              // Ê∏ÖÈô§ÊêúÁ¥¢ÂéÜÂè≤
              await wordService.clearSearchHistory();
              
              // Ê∏ÖÈô§ÂçïËØçÁºìÂ≠ò
              await cacheService.clearPrefix(CACHE_KEYS.WORD_DETAIL);
              
              // Âè™Ê∏ÖÈô§ÈÉ®ÂàÜAsyncStorageÊï∞ÊçÆÔºà‰øùÁïôÁªèÈ™åÂíåÂ≠¶‰π†Êï∞ÊçÆÔºâ
              await AsyncStorage.multiRemove([
                'search_history',
                'user_shows',
                'vocabulary',
                'bookmarks',
                'wrongWords'
              ]);
              
              console.log('‚úÖ Áî®Êà∑Êï∞ÊçÆÊ∏ÖÈô§ÂÆåÊàêÔºàÁªèÈ™åÂíåÂ≠¶‰π†Êï∞ÊçÆÂ∑≤‰øùÁïôÔºâ');
              Alert.alert(
                appLanguage === 'zh-CN' ? 'Ê∏ÖÈô§ÊàêÂäü' : 'Clear Successful', 
                appLanguage === 'zh-CN' ? 'Áî®Êà∑Êï∞ÊçÆÂ∑≤Ê∏ÖÈô§ÔºàÁªèÈ™åÂíåÂ≠¶‰π†Êï∞ÊçÆÂ∑≤‰øùÁïôÔºâ' : 'User data cleared (experience and learning data preserved)'
              );
            } catch (error) {
              console.error('Ê∏ÖÈô§Áî®Êà∑Êï∞ÊçÆÂ§±Ë¥•:', error);
              Alert.alert(
                appLanguage === 'zh-CN' ? 'Ê∏ÖÈô§Â§±Ë¥•' : 'Clear Failed', 
                appLanguage === 'zh-CN' ? 'Ê∏ÖÈô§Êï∞ÊçÆÊó∂ÂèëÁîüÈîôËØØ' : 'Error occurred while clearing data'
              );
            }
          }
        },
      ]
    );
  };


  // ÊµãËØïËÆ¢ÈòÖÁä∂ÊÄÅÂ§ÑÁêÜÂáΩÊï∞
  const handleTestSubscriptionState = async (state: 'trial_expired' | 'premium_monthly' | 'trial_active') => {
    if (!__DEV__) return;
    
    try {
      // ÂØºÂÖ•ÊµãËØïÊúçÂä°
      const SubscriptionTestService = (await import('../../services/subscriptionTestService')).default;
      
      await SubscriptionTestService.setTestState(state);
      
      // Âà∑Êñ∞ËÆ¢ÈòÖÁä∂ÊÄÅ
      const newStatus = await subscriptionService.checkSubscriptionStatus();
      setSubscriptionStatus(newStatus);
      
      // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
      const stateNames = {
        'trial_expired': 'ËØïÁî®ÊúüÂ∑≤ÁªìÊùü',
        'premium_monthly': '‰ªòË¥π‰ºöÂëò',
        'trial_active': 'ËØïÁî®ÊúüÊøÄÊ¥ª'
      };
      
      Alert.alert(
        'ÊµãËØïÁä∂ÊÄÅÂ∑≤Êõ¥Êñ∞',
        `Â∑≤ÂàáÊç¢Âà∞: ${stateNames[state]}`,
        [{ text: 'Á°ÆÂÆö' }]
      );
    } catch (error) {
      console.error('ËÆæÁΩÆÊµãËØïÁä∂ÊÄÅÂ§±Ë¥•:', error);
      Alert.alert('ÈîôËØØ', 'ËÆæÁΩÆÊµãËØïÁä∂ÊÄÅÂ§±Ë¥•');
    }
  };

  const handleClearTestState = async () => {
    if (!__DEV__) return;
    
    try {
      const SubscriptionTestService = (await import('../../services/subscriptionTestService')).default;
      await SubscriptionTestService.clearTestState();
      
      // Âà∑Êñ∞ËÆ¢ÈòÖÁä∂ÊÄÅ
      const newStatus = await subscriptionService.checkSubscriptionStatus();
      setSubscriptionStatus(newStatus);
      
      Alert.alert('ÊàêÂäü', 'Â∑≤Ê∏ÖÈô§ÊµãËØïÁä∂ÊÄÅ');
    } catch (error) {
      console.error('Ê∏ÖÈô§ÊµãËØïÁä∂ÊÄÅÂ§±Ë¥•:', error);
      Alert.alert('ÈîôËØØ', 'Ê∏ÖÈô§ÊµãËØïÁä∂ÊÄÅÂ§±Ë¥•');
    }
  };

  const handleClearAllData = async () => {
    // È¢ùÂ§ñÁöÑÂºÄÂèëÊ®°Âºè‰øùÊä§
    if (!__DEV__) {
      console.warn('‚ö†Ô∏è Â∞ùËØïÂú®Áîü‰∫ßÊ®°Âºè‰∏ãË∞ÉÁî®ÂÆåÂÖ®Ê∏ÖÈô§Êï∞ÊçÆÂáΩÊï∞');
      return;
    }
    
    Alert.alert(
      appLanguage === 'zh-CN' ? '‚ö†Ô∏è ÂÆåÂÖ®Ê∏ÖÈô§Á°ÆËÆ§' : '‚ö†Ô∏è Complete Clear Confirmation',
      appLanguage === 'zh-CN' 
        ? 'ËøôÂ∞ÜÂà†Èô§ËØ•Áî®Êà∑ID‰∏ãÁöÑÊâÄÊúâÊï∞ÊçÆÔºö\n‚Ä¢ ÂéÜÂè≤ÊêúÁ¥¢Êï∞ÊçÆ\n‚Ä¢ ÂâßÂçï\n‚Ä¢ ÂçïËØçÊú¨\n‚Ä¢ Â∑≤ÂÇ®Â≠òÁöÑÂçïËØç\n‚Ä¢ ÁªèÈ™åÊï∞ÊçÆ\n‚Ä¢ Â≠¶‰π†Êï∞ÊçÆ\n‚Ä¢ ÂÇ®Â≠òËØ≠Ë®Ä\n\n‚ö†Ô∏è Ê≠§Êìç‰Ωú‰∏çÂèØÈÄÜÔºÅÁ°ÆÂÆöË¶ÅÁªßÁª≠ÂêóÔºü'
        : 'This will delete all data under this user ID:\n‚Ä¢ Search history\n‚Ä¢ Shows\n‚Ä¢ Vocabulary\n‚Ä¢ Saved words\n‚Ä¢ Experience data\n‚Ä¢ Learning data\n‚Ä¢ Stored languages\n\n‚ö†Ô∏è This operation cannot be undone! Are you sure you want to continue?',
      [
        { text: t('cancel', appLanguage), style: 'cancel' },
        { 
          text: appLanguage === 'zh-CN' ? 'ÂÆåÂÖ®Ê∏ÖÈô§' : 'Clear Completely', 
          style: 'destructive', 
          onPress: async () => {
            try {
              // ÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°àÊ∏ÖÈô§‰∫ëÁ´ØÊï∞ÊçÆ
              if (user?.id) {
                console.log('üóëÔ∏è ÂºÄÂßãÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°àÊ∏ÖÈô§‰∫ëÁ´ØÊï∞ÊçÆÔºåÁî®Êà∑ID:', user.id);
                
                try {
                  // Ê∏ÖÈô§ËØçÊ±áÊï∞ÊçÆ
                  await unifiedSyncService.addToSyncQueue({
                    type: 'vocabulary',
                    data: [],
                    userId: user.id,
                    operation: 'delete',
                    priority: 'high'
                  });
                  
                  // Ê∏ÖÈô§Áî®Êà∑ÁªüËÆ°Êï∞ÊçÆ
                  await unifiedSyncService.addToSyncQueue({
                    type: 'userStats',
                    data: {
                      level: 1,
                      totalReviews: 0,
                      currentStreak: 0,
                      lastUpdated: Date.now()
                    },
                    userId: user.id,
                    operation: 'update',
                    priority: 'high'
                  });
                  
                  // Ê∏ÖÈô§ÊêúÁ¥¢ÂéÜÂè≤
                  await unifiedSyncService.addToSyncQueue({
                    type: 'searchHistory',
                    data: [],
                    userId: user.id,
                    operation: 'delete',
                    priority: 'high'
                  });
                  
                  // Ê∏ÖÈô§Â≠¶‰π†ËÆ∞ÂΩï
                  await unifiedSyncService.addToSyncQueue({
                    type: 'learningRecords',
                    data: [],
                    userId: user.id,
                    operation: 'delete',
                    priority: 'high'
                  });
                  
                  // ÊâßË°åÂêåÊ≠•
                  await unifiedSyncService.syncPendingData();
                  
                  console.log('‚úÖ ÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°àÊ∏ÖÈô§‰∫ëÁ´ØÊï∞ÊçÆÊàêÂäü');
                } catch (error) {
                  console.error('‚ùå ÈÄöËøáÂ§öÈÇªÂõΩÊï∞ÊçÆÂêåÊ≠•ÊñπÊ°àÊ∏ÖÈô§‰∫ëÁ´ØÊï∞ÊçÆÂ§±Ë¥•:', error);
                }
              }
              
              // Ê∏ÖÈô§Êú¨Âú∞Êï∞ÊçÆ
              console.log('üóëÔ∏è ÂºÄÂßãÊ∏ÖÈô§Êú¨Âú∞Êï∞ÊçÆ...');
              
              // Ê∏ÖÈô§ËØçÊ±áÊï∞ÊçÆ
              await clearVocabulary();
              
              // Ê∏ÖÈô§ÂâßÈõÜÊï∞ÊçÆ
              await clearShows();
              
              // Ê∏ÖÈô§ÊêúÁ¥¢ÂéÜÂè≤
              console.log('üóëÔ∏è ÂºÄÂßãÊ∏ÖÈô§ÊêúÁ¥¢ÂéÜÂè≤...');
              const searchHistoryCleared = await wordService.clearSearchHistory();
              console.log('üóëÔ∏è ÊêúÁ¥¢ÂéÜÂè≤Ê∏ÖÈô§ÁªìÊûú:', searchHistoryCleared);
              
              // Ê∏ÖÈô§Áî®Êà∑Â≠¶‰π†Êï∞ÊçÆ
              await learningDataService.clearAll();
              await LearningStatsService.clearAll();
              await unifiedSyncService.clearSyncQueue();
              
              // Ê∏ÖÈô§ÂçïËØçÁºìÂ≠òÔºà‰ΩøÁî®Áªü‰∏ÄÁºìÂ≠òÊúçÂä°Ôºâ
              await cacheService.clearPrefix(CACHE_KEYS.WORD_DETAIL);
              
              // Ê∏ÖÈô§Áî®Êà∑ËÆæÁΩÆÂíåÊâÄÊúâÁõ∏ÂÖ≥Êï∞ÊçÆ
              await AsyncStorage.multiRemove([
                // Áî®Êà∑Âü∫Á°ÄÊï∞ÊçÆ
                'userData',
                'loginType',
                'userToken',
                'guestId',
                'user_settings',
                'user_profile',
                'userStats',
                'userExperienceInfo',
                'userBadges',
                // Â≠¶‰π†Êï∞ÊçÆ
                'learning_records',
                'learningRecords',
                'learningLanguages',
                // ReviewÁõ∏ÂÖ≥Êï∞ÊçÆ
                'review_sessions',
                'pendingExperienceGain',
                'lastReviewIntroInit',
                'lastExperienceCheck',
                'lastRecordedExperience',
                'experienceState',
                'progressBarValue',
                'hasInitializedProgressBar',
                'refreshVocabulary',
                // Daily RewardsÊï∞ÊçÆ
                'dailyRewards',
                'dailyRewardsResetDate',
                // ËØçÊ±áÂíåÂÜÖÂÆπÊï∞ÊçÆ
                'vocabulary',
                'user_shows',
                'wrong_words_collection',
                'wrongWords',
                'bookmarks',
                'cachedRecommendations',
                // ÊêúÁ¥¢ÂíåÂéÜÂè≤Êï∞ÊçÆ
                'search_history',
                'searchHistory',
                // ËÆæÁΩÆÂíåÈÖçÁΩÆ
                'app_settings',
                'selected_language',
                'language_progress',
                // ËÆ¢ÈòÖÊï∞ÊçÆ
                'subscription_status',
                'subscription_record',
                // ÂêåÊ≠•Êï∞ÊçÆ
                'unifiedSyncQueue',
                'deviceId',
                'lastSyncTime',
                'lastAppCloseSync',
                // ÂÖ∂‰ªñ‰∏¥Êó∂Êï∞ÊçÆ
                'initialLanguageSetup'
              ]);
              
              // Ê∏ÖÈô§Daily RewardsÁöÑÁâπÂÆöÊó•ÊúüÈîÆ
              console.log('üóëÔ∏è ÂºÄÂßãÊ∏ÖÈô§Daily RewardsÁöÑÁâπÂÆöÊó•ÊúüÈîÆ...');
              try {
                const allKeys = await AsyncStorage.getAllKeys();
                const dailyRewardsKeys = allKeys.filter(key => 
                  key.startsWith('newWords_') || 
                  key.startsWith('dailyReview_') || 
                  key.startsWith('studyTime_') || 
                  key.startsWith('perfectReview_') ||
                  key.includes('currentStreak')
                );
                console.log('üóëÔ∏è ÊâæÂà∞ÁöÑDaily RewardsÁâπÂÆöÈîÆ:', dailyRewardsKeys);
                if (dailyRewardsKeys.length > 0) {
                  await AsyncStorage.multiRemove(dailyRewardsKeys);
                  console.log('üóëÔ∏è Daily RewardsÁâπÂÆöÈîÆÊ∏ÖÈô§ÂÆåÊàê');
                }
              } catch (error) {
                console.log('üóëÔ∏è Ê∏ÖÈô§Daily RewardsÁâπÂÆöÈîÆÊó∂Âá∫Èîô:', error);
              }
              
              // È™åËØÅÊêúÁ¥¢ÂéÜÂè≤ÊòØÂê¶Â∑≤Ê∏ÖÈô§
              console.log('üîç È™åËØÅÊêúÁ¥¢ÂéÜÂè≤Ê∏ÖÈô§Áä∂ÊÄÅ...');
              try {
                const remainingSearchHistory = await AsyncStorage.getItem('search_history');
                console.log('üîç Ê∏ÖÈô§ÂêéÁöÑsearch_historyÁä∂ÊÄÅ:', remainingSearchHistory);
                const recentWords = await wordService.getRecentWords();
                console.log('üîç Ê∏ÖÈô§ÂêégetRecentWordsÁªìÊûú:', recentWords);
              } catch (error) {
                console.log('üîç È™åËØÅÊêúÁ¥¢ÂéÜÂè≤Ê∏ÖÈô§Áä∂ÊÄÅÊó∂Âá∫Èîô:', error);
              }
              
              // Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ
              const stats = await cacheService.getStats();
              console.log('üóëÔ∏è Ê∏ÖÈô§ÊâÄÊúâÊï∞ÊçÆÂÆåÊàêÔºåÁºìÂ≠òÁªüËÆ°:', stats);
              
              Alert.alert(
                appLanguage === 'zh-CN' ? 'Ê∏ÖÈô§ÊàêÂäü' : 'Clear Successful', 
                appLanguage === 'zh-CN' ? 'ÊâÄÊúâÁî®Êà∑Êï∞ÊçÆÂ∑≤ÂÆåÂÖ®Ê∏ÖÈô§' : 'All user data has been completely cleared'
              );
            } catch (error) {
              console.error('Ê∏ÖÈô§ÊâÄÊúâÊï∞ÊçÆÂ§±Ë¥•:', error);
              Alert.alert(t('clear_failed', appLanguage), t('clear_error', appLanguage));
            }
          }
        },
      ]
    );
  };

  const handleGoToSubscription = () => {
    navigate('Subscription');
  };

  const handleDeleteAccount = () => {
    setDeleteAccountModalVisible(true);
  };

  // Â§ÑÁêÜË∑®ËÆæÂ§áÂêåÊ≠•
  const handleCrossDeviceSync = async () => {
    try {
      console.log('üçé Áî®Êà∑ÁÇπÂáªË∑®ËÆæÂ§áÂêåÊ≠•...');
      
      const crossDeviceService = AppleCrossDeviceSyncService.getInstance();
      const success = await crossDeviceService.manualSync();
      
      if (success) {
        // Êõ¥Êñ∞ÂêåÊ≠•Áä∂ÊÄÅ
        setCrossDeviceSyncStatus(crossDeviceService.getSyncStatus());
        Alert.alert(
          'ÂêåÊ≠•ÊàêÂäü',
          'ÊÇ®ÁöÑÊï∞ÊçÆÂ∑≤ÊàêÂäüÂêåÊ≠•Âà∞‰∫ëÁ´ØÔºåÂÖ∂‰ªñËÆæÂ§áÂèØ‰ª•Ëé∑ÂèñÊúÄÊñ∞Êï∞ÊçÆ„ÄÇ',
          [{ text: 'Â•ΩÁöÑ' }]
        );
      } else {
        Alert.alert(
          'ÂêåÊ≠•Â§±Ë¥•',
          'Ë∑®ËÆæÂ§áÂêåÊ≠•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÂêéÈáçËØï„ÄÇ',
          [{ text: 'ÈáçËØï', onPress: handleCrossDeviceSync }, { text: 'ÂèñÊ∂à' }]
        );
      }
    } catch (error) {
      console.error('‚ùå Ë∑®ËÆæÂ§áÂêåÊ≠•Â§±Ë¥•:', error);
      Alert.alert('ÈîôËØØ', 'ÂêåÊ≠•ËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØÔºåËØ∑ÈáçËØï');
    }
  };

  // Êñ∞Â¢ûÔºöËÆæÁΩÆAPPÂÖ≥Èó≠Êó∂ÂêåÊ≠•
  const setupAppCloseSync = () => {
    // ÁõëÂê¨APPÁä∂ÊÄÅÂèòÂåñ
    const handleAppStateChange = (nextAppState: string) => {
      console.log('üîÑ [ProfileScreen] AppState ÂèòÂåñ:', nextAppState);
      
      if (nextAppState === 'background' || nextAppState === 'inactive') {
        console.log('üîÑ [ProfileScreen] APPËøõÂÖ•ÂêéÂè∞ÔºåÂºÄÂßãÂêåÊ≠•Êï∞ÊçÆ...');
        syncOnAppClose();
      }
    };
    
    // Ê∑ªÂä†AppStateÁõëÂê¨Âô®
    const subscription = AppState.addEventListener('change', handleAppStateChange);
    
    // ËøîÂõûÊ∏ÖÁêÜÂáΩÊï∞
    return () => {
      subscription?.remove();
    };
  };

  // Êñ∞Â¢ûÔºöAPPÂÖ≥Èó≠Êó∂ÂêåÊ≠•Êï∞ÊçÆ
  const syncOnAppClose = async () => {
    try {
      console.log('üîÑ [ProfileScreen] ÂºÄÂßãAPPÂÖ≥Èó≠Êó∂ÂêåÊ≠•...');
      console.log('üîÑ [ProfileScreen] ÂΩìÂâçÁî®Êà∑ID:', user?.id);
      console.log('üîÑ [ProfileScreen] ÂΩìÂâçÁôªÂΩïÁ±ªÂûã:', loginType);
      
      const userId = user?.id;
      if (!userId) {
        console.log('‚ö†Ô∏è [ProfileScreen] Áî®Êà∑Êú™ÁôªÂΩïÔºåË∑≥ËøáAPPÂÖ≥Èó≠ÂêåÊ≠•');
        return;
      }
      
      // Ê£ÄÊü•ÊòØÂê¶ÁúüÁöÑÈúÄË¶ÅÂêåÊ≠•ÔºàÈÅøÂÖçÈ¢ëÁπÅËß¶ÂèëÔºâ
      const lastSync = await AsyncStorage.getItem('lastAppCloseSync');
      const now = Date.now();
      if (lastSync && (now - parseInt(lastSync)) < 30000) { // 30ÁßíÂÜÖ‰∏çÈáçÂ§çÂêåÊ≠•
        console.log('‚ö†Ô∏è [ProfileScreen] 30ÁßíÂÜÖÂ∑≤ÂêåÊ≠•ËøáÔºåË∑≥ËøáÈáçÂ§çÂêåÊ≠•');
        return;
      }
      
      // Ëé∑ÂèñÊâÄÊúâÈúÄË¶ÅÂêåÊ≠•ÁöÑÊú¨Âú∞Êï∞ÊçÆ
      const syncTasks = [];
      
      // 1. ÂêåÊ≠•Áî®Êà∑ÁªüËÆ°Êï∞ÊçÆ
      const localStatsData = await AsyncStorage.getItem('userStats');
      if (localStatsData) {
        const localStats = JSON.parse(localStatsData);
        syncTasks.push(
          unifiedSyncService.addToSyncQueue({
            type: 'userStats',
            data: {
              ...localStats,
              lastUpdated: Date.now()
            },
            userId: userId,
            operation: 'update',
            priority: 'high'  // ÂÖ≥Èó≠Êó∂‰ΩøÁî®È´ò‰ºòÂÖàÁ∫ß
          })
        );
      }
      
      // 2. ÂêåÊ≠•ÈÄöÁü•ÂÅèÂ•ΩËÆæÁΩÆ
      const notificationPrefs = await notificationService.loadNotificationPreferences();
      syncTasks.push(
        unifiedSyncService.addToSyncQueue({
          type: 'userSettings',
          data: {
            notificationPreferences: notificationPrefs,
            lastUpdated: Date.now()
          },
          userId: userId,
          operation: 'update',
          priority: 'high'
        })
      );
      
      // 3. ÂêåÊ≠•ËØçÊ±áÊï∞ÊçÆ
      if (vocabulary && vocabulary.length > 0) {
        syncTasks.push(
          unifiedSyncService.addToSyncQueue({
            type: 'vocabulary',
            data: vocabulary.map(word => ({
              ...word,
              lastUpdated: Date.now()
            })),
            userId: userId,
            operation: 'update',
            priority: 'high'
          })
        );
      }
      
      // 4. ÂêåÊ≠•ÂâßÈõÜÊï∞ÊçÆ
      if (shows && shows.length > 0) {
        syncTasks.push(
          unifiedSyncService.addToSyncQueue({
            type: 'shows',
            data: shows.map(show => ({
              ...show,
              lastUpdated: Date.now()
            })),
            userId: userId,
            operation: 'update',
            priority: 'high'
          })
        );
      }
      
      // 5. ÂêåÊ≠•ÊêúÁ¥¢ÂéÜÂè≤
      const searchHistory = await wordService.getRecentWords();
      if (searchHistory && searchHistory.length > 0) {
        syncTasks.push(
          unifiedSyncService.addToSyncQueue({
            type: 'searchHistory',
            data: searchHistory.map(item => ({
              ...item,
              lastUpdated: Date.now()
            })),
            userId: userId,
            operation: 'update',
            priority: 'medium'
          })
        );
      }
      
      // ÊâßË°åÊâÄÊúâÂêåÊ≠•‰ªªÂä°
      await Promise.all(syncTasks);
      
      // ÊâßË°åÁªü‰∏ÄÂêåÊ≠•
      await unifiedSyncService.syncPendingData();
      
      console.log('‚úÖ APPÂÖ≥Èó≠Êó∂ÂêåÊ≠•Êï∞ÊçÆÂÆåÊàê');
      
      // ËÆ∞ÂΩïÂêåÊ≠•Êó∂Èó¥
      await AsyncStorage.setItem('lastAppCloseSync', Date.now().toString());
      
    } catch (error) {
      console.error('‚ùå APPÂÖ≥Èó≠Êó∂ÂêåÊ≠•Êï∞ÊçÆÂ§±Ë¥•:', error);
    }
  };

  const handleAccountDeleted = () => {
    // Ê∏ÖÈô§ÊâÄÊúâÊú¨Âú∞Êï∞ÊçÆ
    clearVocabulary();
    clearShows();
    
    // ÈÄÄÂá∫ÁôªÂΩï
    authLogout();
    
    // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
    Alert.alert('Ë¥¶Êà∑Â∑≤Ê≥®ÈîÄ', 'ÊÇ®ÁöÑË¥¶Êà∑Â∑≤ÊàêÂäüÂà†Èô§ÔºåÊÑüË∞¢ÊÇ®‰ΩøÁî®ÂâßËØçËÆ∞ÔºÅ');
  };

  const handleViewAllBadges = async () => {
    console.log('[ProfileScreen] Áî®Êà∑ÁÇπÂáªVIEW ALLÂæΩÁ´†ÊåâÈíÆÔºåÊ£ÄÊü•ÂäüËÉΩÊùÉÈôê');
    const canAccess = await FeatureAccessService.checkAndHandleAccess('badges');
    if (!canAccess) {
      console.log('[ProfileScreen] ÂæΩÁ´†ÂäüËÉΩË¢´ÈîÅÂÆöÔºåÊòæÁ§∫ÂçáÁ∫ßÂºπÁ™ó');
      setLockedFeature('badges');
      setUpgradeModalVisible(true);
      return;
    }
    console.log('[ProfileScreen] ÂæΩÁ´†ÂäüËÉΩÊùÉÈôêÈÄöËøáÔºåÂØºËà™Âà∞ÂæΩÁ´†Â¢ô');
    navigate('badgeWall');
  };

  const renderSubscriptionEntry = () => {
    // ‰ªòË¥πËÆ¢ÈòÖ‰ºöÂëò‰∏çÊòæÁ§∫ËÆ¢ÈòÖÊùøÂùó
    if (subscriptionStatus?.isActive) {
      return null;
    }

    // Ê†πÊçÆËÆ¢ÈòÖÁä∂ÊÄÅÊòæÁ§∫‰∏çÂêåÂÜÖÂÆπ
    const getSubscriptionIcon = () => {
      if (subscriptionStatus?.isTrial) {
        return 'time';
      } else {
        return 'phone-portrait';
      }
    };

    const getSubscriptionTitle = () => {
      if (subscriptionStatus?.isTrial) {
        return t('trial_user', appLanguage);
      } else {
        return t('free_user', appLanguage);
      }
    };

    const getSubscriptionDesc = () => {
      if (subscriptionStatus?.isTrial && subscriptionStatus?.trialEndsAt) {
        const timeLeft = new Date(subscriptionStatus.trialEndsAt).getTime() - new Date().getTime();
        const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        return t('trial_countdown', appLanguage, { days: daysLeft }) + 'Ôºå' + t('enjoy_all_features', appLanguage);
      } else {
        return t('trial_ended_limitations', appLanguage);
      }
    };

    const getButtonText = () => {
      if (subscriptionStatus?.isTrial) {
        return t('subscribe_now', appLanguage);
      } else {
        return t('start_trial', appLanguage);
      }
    };

    return (
      <View style={styles.subscriptionSection}>
        <View style={styles.subscriptionHeader}>
          <View style={styles.subscriptionTitleContainer}>
            <Ionicons 
              name={getSubscriptionIcon()} 
              size={20} 
              color={subscriptionStatus?.isTrial ? '#FF9500' : '#666666'} 
              style={styles.subscriptionTitleIcon}
            />
            <Text style={styles.subscriptionTitle}>
              {getSubscriptionTitle()}
            </Text>
          </View>
          <Text style={styles.subscriptionDesc}>
            {getSubscriptionDesc()}
          </Text>
        </View>
        
        <TouchableOpacity 
          style={styles.subscriptionBtn} 
          onPress={handleGoToSubscription}
          activeOpacity={0.8}
        >
          <Text style={styles.subscriptionBtnText}>
            {getButtonText()}
          </Text>
          <Ionicons name="chevron-forward" size={20} color="#fff" />
        </TouchableOpacity>
        
        
        {/* ÂÖçË¥πÁâàÂäüËÉΩÈôêÂà∂ÊèêÁ§∫ */}
        {subscriptionStatus && !subscriptionStatus.isActive && !subscriptionStatus.isTrial && (
          <View style={styles.freeVersionTip}>
            <Ionicons name="lock-closed" size={16} color="#FF6B6B" />
            <Text style={styles.freeVersionTipText}>
              ÂÖçË¥πÁâà‰ªÖÊîØÊåÅ‰∏≠Ëã±ÊñáÊü•ËØçÔºåÂçáÁ∫ßËß£ÈîÅÂÖ®ÈÉ®ÂäüËÉΩ
            </Text>
          </View>
        )}
      </View>
    );
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.primary[500]} />
          <Text style={styles.loadingText}>{t('loading', appLanguage)}</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false} contentContainerStyle={styles.scrollContent}>
        {renderUserInfo()}
        {renderSubscriptionEntry()}
        {/* ÂæΩÁ´†ÂÖ•Âè£Âå∫Âùó */}
        {!badgesLoading && badges.length > 0 && (
          <BadgeEntrySection
            badges={badges}
            userProgress={userProgress}
            onViewAll={handleViewAllBadges}
          />
        )}
        {/* {renderStats()} Â≠¶‰π†ÁªüËÆ°ÊùøÂùóÂ∑≤Âà†Èô§ */}
        {renderSettings()}
      </ScrollView>
      
      {/* ÁºñËæë‰∏™‰∫∫‰ø°ÊÅØÊ®°ÊÄÅÊ°Ü */}
      <EditProfileModal
        visible={editModalVisible}
        onClose={() => setEditModalVisible(false)}
        onUpdate={handleProfileUpdate}
        user={{
          id: user?.id || 'guest',
          nickname: user?.nickname || getUserNickname(),
          avatar: user?.avatar,
          email: user?.email,
        }}
      />
      
      {/* Â∫îÁî®ËØ≠Ë®ÄÈÄâÊã©Âô® */}
      <AppLanguageSelector
        visible={languageModalVisible}
        onClose={() => setLanguageModalVisible(false)}
        defaultTab={openLanguageSettings ? 'learning' : 'app'}
      />
      
      {/* ÂèçÈ¶àÊ®°ÊÄÅÊ°Ü */}
      <FeedbackModal
        visible={feedbackModalVisible}
        onClose={() => setFeedbackModalVisible(false)}
      />

      {/* Ê≥®ÈîÄË¥¶Êà∑Ê®°ÊÄÅÊ°Ü */}
      <DeleteAccountModal
        visible={deleteAccountModalVisible}
        onClose={() => setDeleteAccountModalVisible(false)}
        onAccountDeleted={handleAccountDeleted}
      />


      

      
      {/* ÂçáÁ∫ßÂºπÁ™ó */}
      <UpgradeModal
        visible={upgradeModalVisible}
        onClose={() => setUpgradeModalVisible(false)}
        feature={lockedFeature as any}
        onUpgrade={() => {
          setUpgradeModalVisible(false);
          navigate('Subscription');
        }}
      />

      {/* ÂàÜ‰∫´Â∫îÁî®ÂºπÁ™ó */}
      <ShareAppModal
        visible={shareAppModalVisible}
        onClose={() => setShareAppModalVisible(false)}
      />

      {/* ÂÖ≥‰∫éÊàë‰ª¨ÂºπÁ™ó */}
      <Modal
        visible={aboutModalVisible}
        animationType="slide"
        transparent={true}
        onRequestClose={() => setAboutModalVisible(false)}
      >
        <View style={{ flex: 1, backgroundColor: 'rgba(0,0,0,0.4)', justifyContent: 'center', alignItems: 'center' }}>
          <View style={{ width: '90%', maxHeight: '80%', backgroundColor: colors.background.primary, borderRadius: 18, padding: 20 }}>
            <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', marginBottom: 12 }}>
              <Text style={{ fontSize: 20, fontWeight: 'bold', color: colors.primary[500] }}>{t('about_dramaword', appLanguage)}</Text>
              <TouchableOpacity onPress={() => setAboutModalVisible(false)}>
                <Ionicons name="close" size={24} color={colors.text.secondary} />
              </TouchableOpacity>
            </View>
            <ScrollView showsVerticalScrollIndicator={true}>
              <Text style={{ color: colors.text.primary, fontSize: 15, lineHeight: 24 }}>
                {getAboutUsContent()}
              </Text>
            </ScrollView>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background.primary,
  },
  // header Ê†∑ÂºèÂ∑≤‰∏çÂÜç‰ΩøÁî®ÔºåÂèØ‰ª•‰øùÁïôÊàñÂà†Èô§
  header: {
    padding: 20,
    paddingTop: 10,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    color: colors.text.primary,
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: colors.text.secondary,
    fontWeight: '500',
  },
  content: {
    flex: 1,
  },
  scrollContent: {
    paddingTop: 24, // Â¢ûÂä†È°∂ÈÉ®ËæπË∑ù
    paddingBottom: 20, // Â¢ûÂä†Â∫ïÈÉ®ËæπË∑ù
  },
  userSection: {
    backgroundColor: colors.background.secondary,
    marginHorizontal: 20,
    marginBottom: 20,
    borderRadius: 16,
    padding: 20,
    shadowColor: colors.primary[200],
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  userHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  avatar: {
    width: 80,
    height: 80,
    borderRadius: 40,
    marginRight: 16,
  },
  userDetails: {
    flex: 1,
  },
  userName: {
    fontSize: 20,
    fontWeight: '700',
    color: colors.text.primary,
    marginBottom: 4,
  },
  vipCrownContainer: {
    marginLeft: 8,
    alignItems: 'center',
    justifyContent: 'center',
  },
  vipCrownIcon: {
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  membershipInfoContainer: {
    marginTop: 4,
    marginBottom: 8,
  },
  membershipInfo: {
    fontSize: 12,
    color: colors.text.secondary,
    fontWeight: '500',
    lineHeight: 16,
  },

  userEmail: {
    fontSize: 14,
    color: colors.text.secondary,
    marginBottom: 2,
  },
  joinDate: {
    fontSize: 12,
    color: colors.neutral[500],
  },
     loginButton: {
     marginTop: 12,
     paddingVertical: 10,
     paddingHorizontal: 20,
     backgroundColor: colors.primary[50], // ÈùûÂ∏∏ÊµÖÁöÑËìùËâ≤ËÉåÊôØ
     borderRadius: 20, // Êõ¥ÂúÜÊ∂¶ÁöÑËæπËßí
     alignSelf: 'flex-start',
     borderWidth: 1,
     borderColor: colors.primary[300], // ÁªÜËæπÊ°Ü
     flexDirection: 'row',
     alignItems: 'center',
     shadowColor: colors.primary[200],
     shadowOffset: { width: 0, height: 1 },
     shadowOpacity: 0.1,
     shadowRadius: 2,
     elevation: 1,
   },
   loginButtonText: {
     color: colors.primary[600], // ËìùËâ≤ÊñáÂ≠óÔºå‰∏éÂõæÊ†áÈ¢úËâ≤‰∏ÄËá¥
     fontWeight: '600',
     fontSize: 14,
     marginLeft: 6, // ÂõæÊ†áÂíåÊñáÂ≠ó‰πãÈó¥ÁöÑÈó¥Ë∑ù
   },
  loggedInText: {
    color: colors.success[500],
    marginTop: 8,
    fontSize: 14,
    fontWeight: '500',
  },
  editButton: {
    padding: 8,
  },
  editButtonInline: {
    marginLeft: 8,
    padding: 4,
  },
  guestReminder: {
    fontSize: 12,
    color: colors.text.secondary,
    marginTop: 4,
    marginBottom: 8,
    lineHeight: 16,
    fontStyle: 'italic',
  },
  syncIndicatorContainer: {
    marginTop: 8,
    marginBottom: 4,
  },
  statsSection: {
    backgroundColor: colors.background.secondary,
    marginHorizontal: 20,
    marginBottom: 20,
    borderRadius: 16,
    padding: 20,
    shadowColor: colors.primary[200],
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.text.primary,
    marginBottom: 16,
  },
  statsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  statCard: {
    alignItems: 'center',
    flex: 1,
  },
  statNumber: {
    fontSize: 20,
    fontWeight: '700',
    color: colors.text.primary,
    marginTop: 8,
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: colors.text.secondary,
    textAlign: 'center',
  },
  progressSection: {
    marginBottom: 20,
  },
  progressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  progressTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text.primary,
  },
  progressPercentage: {
    fontSize: 16,
    fontWeight: '700',
    color: colors.primary[500],
  },
  progressBar: {
    height: 8,
    backgroundColor: colors.neutral[100],
    borderRadius: 4,
    marginBottom: 8,
  },
  progressFill: {
    height: '100%',
    backgroundColor: colors.primary[500],
    borderRadius: 4,
  },
  progressText: {
    fontSize: 14,
    color: colors.text.secondary,
    textAlign: 'center',
  },
  accuracySection: {
    alignItems: 'center',
  },
  accuracyTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text.primary,
    marginBottom: 8,
  },
  accuracyDisplay: {
    alignItems: 'center',
  },
  accuracyNumber: {
    fontSize: 32,
    fontWeight: '700',
    color: colors.success[500],
    marginBottom: 4,
  },
  accuracyLabel: {
    fontSize: 14,
    color: colors.text.secondary,
  },
  settingsSection: {
    backgroundColor: colors.background.secondary,
    marginHorizontal: 20,
    marginBottom: 20,
    borderRadius: 16,
    padding: 20,
    shadowColor: colors.primary[200],
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  settingItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: colors.neutral[100],
  },
  settingLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingLabel: {
    fontSize: 16,
    color: colors.text.primary,
    marginLeft: 12,
    fontWeight: '500',
  },
  settingText: {
    fontSize: 16,
    color: colors.text.secondary,
    marginLeft: 12,
  },
  settingItemDisabled: {
    opacity: 0.5,
  },
  section: {
    marginBottom: 20,
  },
  subscriptionSection: {
    backgroundColor: colors.background.secondary,
    marginHorizontal: 20,
    marginBottom: 20,
    borderRadius: 16,
    padding: 20,
    shadowColor: colors.primary[200],
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  subscriptionHeader: {
    marginBottom: 16,
  },
  subscriptionTitleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  subscriptionTitleIcon: {
    marginRight: 8,
  },
  subscriptionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: colors.text.primary,
  },
  subscriptionDesc: {
    fontSize: 14,
    color: colors.text.secondary,
    lineHeight: 20,
  },
  subscriptionBtn: {
    backgroundColor: colors.primary[500],
    borderRadius: 12,
    paddingVertical: 14,
    paddingHorizontal: 20,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    shadowColor: colors.primary[200],
    shadowOpacity: 0.12,
    shadowRadius: 8,
    elevation: 2,
  },
  subscriptionBtnText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '700',
    letterSpacing: 1,
  },
  guestSubscriptionTip: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 12,
    padding: 12,
    backgroundColor: colors.primary[50],
    borderRadius: 8,
  },
  guestSubscriptionTipText: {
    fontSize: 12,
    color: colors.primary[600],
    marginLeft: 8,
    lineHeight: 16,
  },
  trialCountdownTip: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 12,
    padding: 12,
    backgroundColor: '#FFF3E0',
    borderRadius: 8,
    borderLeftWidth: 3,
    borderLeftColor: '#FF9500',
  },
  trialCountdownTipText: {
    fontSize: 12,
    color: '#F57C00',
    marginLeft: 8,
    lineHeight: 16,
    fontWeight: '600',
  },
  freeVersionTip: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 12,
    padding: 12,
    backgroundColor: '#FFEBEE',
    borderRadius: 8,
    borderLeftWidth: 3,
    borderLeftColor: '#FF6B6B',
  },
  freeVersionTipText: {
    fontSize: 12,
    color: '#D32F2F',
    marginLeft: 8,
    lineHeight: 16,
    fontWeight: '600',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: colors.background.primary,
  },
  loadingText: {
    marginTop: 10,
    color: colors.text.secondary,
    fontSize: 16,
  },
  userActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.primary[500],
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
    justifyContent: 'center',
    width: '100%',
    marginTop: 12,
  },
  userActionButtonText: {
    color: colors.text.inverse,
    fontWeight: '600',
    fontSize: 16,
    marginLeft: 8,
  },
  logoutButton: {
    backgroundColor: colors.error[500],
  },

  // ÂºÄÂèëÊµãËØïÁõ∏ÂÖ≥Ê†∑Âºè
  devTestSection: {
    marginTop: 20,
    marginBottom: 30,
    paddingHorizontal: 20,
  },
  devTestSectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.text.primary,
    marginBottom: 16,
    textAlign: 'center',
  },
  devTestButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: colors.primary[500],
    borderRadius: 12,
    paddingVertical: 14,
    paddingHorizontal: 20,
    marginBottom: 12,
    shadowColor: colors.primary[200],
    shadowOpacity: 0.12,
    shadowRadius: 8,
    elevation: 2,
  },
  devTestButtonText: {
    color: colors.white,
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },

}); 