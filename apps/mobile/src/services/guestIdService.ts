import AsyncStorage from '@react-native-async-storage/async-storage';

class GuestIdService {
  private static instance: GuestIdService;
  private cachedGuestId: string | null = null;

  private constructor() {}

  public static getInstance(): GuestIdService {
    if (!GuestIdService.instance) {
      GuestIdService.instance = new GuestIdService();
    }
    return GuestIdService.instance;
  }

  /**
   * 生成简洁的游客ID
   */
  private generateSimpleGuestId(): string {
    return `Guest${Math.floor(Math.random() * 999) + 1}`;
  }

  /**
   * 获取或生成游客ID
   * 优先使用已保存的ID，如果没有则生成新的
   */
  public async getGuestId(): Promise<string> {
    // 如果内存中已有缓存的ID，直接返回
    if (this.cachedGuestId !== null) {
      return this.cachedGuestId;
    }

    try {
      // 尝试从AsyncStorage获取已保存的游客ID
      const userData = await AsyncStorage.getItem('userData');
      if (userData) {
        const parsed = JSON.parse(userData);
        if (parsed.nickname && parsed.nickname.startsWith('Guest')) {
          this.cachedGuestId = parsed.nickname;
          return parsed.nickname;
        }
      }

      // 如果没有已保存的ID，生成新的
      const newGuestId = this.generateSimpleGuestId();
      this.cachedGuestId = newGuestId;
      
      // 保存到AsyncStorage
      await this.saveGuestId(newGuestId);
      
      return newGuestId;
    } catch (error) {
      console.error('获取游客ID失败:', error);
      // 出错时返回生成的ID，但不保存
      return this.generateSimpleGuestId();
    }
  }

  /**
   * 保存游客ID到AsyncStorage
   */
  private async saveGuestId(guestId: string): Promise<void> {
    try {
      const userData = {
        id: guestId,
        nickname: guestId,
        loginType: 'guest',
        token: null,
        isAutoGenerated: true,
        createdAt: Date.now(),
        localDataVersion: 1
      };

      await AsyncStorage.setItem('userData', JSON.stringify(userData));
      console.log('✅ 游客ID已保存:', guestId);
    } catch (error) {
      console.error('保存游客ID失败:', error);
    }
  }

  /**
   * 清除缓存的游客ID
   */
  public clearCachedGuestId(): void {
    this.cachedGuestId = null;
  }

  /**
   * 强制重新生成游客ID
   */
  public async regenerateGuestId(): Promise<string> {
    this.clearCachedGuestId();
    const newGuestId = this.generateSimpleGuestId();
    this.cachedGuestId = newGuestId;
    await this.saveGuestId(newGuestId);
    return newGuestId;
  }
}

export const guestIdService = GuestIdService.getInstance();
