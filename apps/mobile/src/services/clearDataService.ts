import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from 'react-native';

export class ClearDataService {
  private static instance: ClearDataService;

  public static getInstance(): ClearDataService {
    if (!ClearDataService.instance) {
      ClearDataService.instance = new ClearDataService();
    }
    return ClearDataService.instance;
  }

  // 清除所有本地存储数据
  public async clearAllData(): Promise<void> {
    try {
      // 显示确认对话框
      Alert.alert(
        '清除所有数据',
        '这将清除所有本地数据，包括经验值、用户名、学习记录等。此操作不可撤销，确定要继续吗？',
        [
          {
            text: '取消',
            style: 'cancel',
          },
          {
            text: '确定清除',
            style: 'destructive',
            onPress: async () => {
              await this.performClearAllData();
            },
          },
        ]
      );
    } catch (error) {
      console.error('清除数据失败:', error);
      Alert.alert('错误', '清除数据时发生错误');
    }
  }

  // 完全重新初始化（相当于重新安装APP）
  public async completeReinstall(): Promise<void> {
    try {
      Alert.alert(
        '完全重新初始化',
        '这将完全清除所有数据并重新初始化应用，相当于重新安装APP。此操作不可撤销，确定要继续吗？',
        [
          {
            text: '取消',
            style: 'cancel',
          },
          {
            text: '确定重新初始化',
            style: 'destructive',
            onPress: async () => {
              await this.performCompleteReinstall();
            },
          },
        ]
      );
    } catch (error) {
      console.error('完全重新初始化失败:', error);
      Alert.alert('错误', '完全重新初始化时发生错误');
    }
  }

  // 执行清除所有数据的操作
  private async performClearAllData(): Promise<void> {
    try {
      console.log('开始清除所有本地数据...');

      // 定义所有需要清除的存储键
      const storageKeys = [
        // 用户相关数据
        'authToken',
        'userData',
        'userInfo',
        'userExperienceInfo',
        'loginType',
        'deviceId',
        'autoGeneratedGuestId', // 添加这个键，清除游客ID自动生成标记
        
        // 学习数据
        'learningRecords',
        'reviewSessions',
        'wrong_words_collection',
        'experienceEvents',
        'navigationParams',
        'pendingExperienceGain',
        'lastRecordedExperience',
        
        // 每日奖励数据
        'dailyRewards',
        'dailyRewardsReset',
        'newWordsCount',
        'reviewCount',
        'studyTime',
        'currentStreak',
        'perfectReview',
        
        // 同步数据
        'unifiedSyncQueue',
        'syncQueue',
        
        // 缓存数据
        'wordDataCache',
        'searchHistory',
        
        // 通知设置
        'notificationPreferences',
        
        // 其他数据
        'refreshVocabulary',
        'lastSyncTime',
        'appSettings',
        'userStats',
      ];

      // 清除所有定义的键
      for (const key of storageKeys) {
        try {
          await AsyncStorage.removeItem(key);
          console.log(`已清除: ${key}`);
        } catch (error) {
          console.warn(`清除 ${key} 失败:`, error);
        }
      }

      // 清除所有以特定前缀开头的键
      await this.clearKeysWithPrefix('guest_');
      await this.clearKeysWithPrefix('cache_');
      await this.clearKeysWithPrefix('temp_');

      console.log('所有本地数据已清除完成');
      Alert.alert('成功', '所有本地数据已清除完成，应用将重新启动');

      // 延迟重启应用
      setTimeout(() => {
        // 这里可以添加重启应用的逻辑
        // 或者让用户手动重启应用
      }, 1000);

    } catch (error) {
      console.error('清除数据过程中发生错误:', error);
      Alert.alert('错误', '清除数据过程中发生错误');
    }
  }

  // 执行完全重新初始化
  private async performCompleteReinstall(): Promise<void> {
    try {
      console.log('开始完全重新初始化...');

      // 1. 清除所有AsyncStorage数据
      const allKeys = await AsyncStorage.getAllKeys();
      if (allKeys.length > 0) {
        await AsyncStorage.multiRemove(allKeys);
        console.log(`已清除所有 ${allKeys.length} 个存储键`);
      }

      // 2. 清除游客ID服务缓存
      try {
        const { guestIdService } = await import('./guestIdService');
        guestIdService.clearCachedGuestId();
        console.log('已清除游客ID服务缓存');
      } catch (error) {
        console.warn('清除游客ID服务缓存失败:', error);
      }

      // 3. 清除其他可能的缓存
      try {
        // 清除React Native的缓存
        if (__DEV__) {
          // 开发模式下清除更多缓存
          console.log('开发模式：清除额外缓存');
        }
      } catch (error) {
        console.warn('清除额外缓存失败:', error);
      }

      console.log('完全重新初始化完成');
      Alert.alert(
        '重新初始化完成', 
        '所有数据已清除，应用将重新启动。请完全关闭应用并重新打开，以获得全新的体验。',
        [
          {
            text: '确定',
            onPress: () => {
              // 提示用户手动重启应用
              console.log('请用户手动重启应用');
            }
          }
        ]
      );

    } catch (error) {
      console.error('完全重新初始化过程中发生错误:', error);
      Alert.alert('错误', '完全重新初始化过程中发生错误');
    }
  }

  // 清除以特定前缀开头的所有键
  private async clearKeysWithPrefix(prefix: string): Promise<void> {
    try {
      const keys = await AsyncStorage.getAllKeys();
      const keysToRemove = keys.filter(key => key.startsWith(prefix));
      
      if (keysToRemove.length > 0) {
        await AsyncStorage.multiRemove(keysToRemove);
        console.log(`已清除 ${keysToRemove.length} 个以 ${prefix} 开头的键`);
      }
    } catch (error) {
      console.warn(`清除前缀 ${prefix} 的键失败:`, error);
    }
  }

  // 清除特定类型的数据
  public async clearExperienceData(): Promise<void> {
    const experienceKeys = [
      'userExperienceInfo',
      'experienceEvents',
      'pendingExperienceGain',
      'lastRecordedExperience',
    ];

    for (const key of experienceKeys) {
      await AsyncStorage.removeItem(key);
    }
    console.log('经验值数据已清除');
  }

  public async clearUserData(): Promise<void> {
    const userKeys = [
      'authToken',
      'userData',
      'userInfo',
      'loginType',
      'deviceId',
    ];

    for (const key of userKeys) {
      await AsyncStorage.removeItem(key);
    }
    console.log('用户数据已清除');
  }

  public async clearLearningData(): Promise<void> {
    const learningKeys = [
      'learningRecords',
      'reviewSessions',
      'wrong_words_collection',
      'navigationParams',
    ];

    for (const key of learningKeys) {
      await AsyncStorage.removeItem(key);
    }
    console.log('学习数据已清除');
  }

  // 获取当前存储的所有键（用于调试）
  public async getAllStorageKeys(): Promise<string[]> {
    try {
      const keys = await AsyncStorage.getAllKeys();
      console.log('当前存储的所有键:', keys);
      return [...keys]; // 转换为可变数组
    } catch (error) {
      console.error('获取存储键失败:', error);
      return [];
    }
  }
}

export const clearDataService = ClearDataService.getInstance();
