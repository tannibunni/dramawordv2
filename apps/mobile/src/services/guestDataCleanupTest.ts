import AsyncStorage from '@react-native-async-storage/async-storage';
import { guestUpgradeService } from './guestUpgradeService';

/**
 * 游客数据清理测试服务
 * 用于测试和验证游客数据清理功能
 */
export class GuestDataCleanupTest {
  private static instance: GuestDataCleanupTest;

  private constructor() {}

  public static getInstance(): GuestDataCleanupTest {
    if (!GuestDataCleanupTest.instance) {
      GuestDataCleanupTest.instance = new GuestDataCleanupTest();
    }
    return GuestDataCleanupTest.instance;
  }

  /**
   * 创建测试游客数据
   */
  public async createTestGuestData(): Promise<void> {
    try {
      console.log('[GuestDataCleanupTest] 🧪 创建测试游客数据...');
      
      const testData = {
        // 游客数据
        'guest_vocabulary': JSON.stringify([
          { word: 'hello', meaning: '你好', learned: true },
          { word: 'world', meaning: '世界', learned: false }
        ]),
        'guest_learningRecords': JSON.stringify([
          { wordId: '1', word: 'hello', reviewCount: 3, correctCount: 2 }
        ]),
        'guest_userStats': JSON.stringify({
          totalWords: 2,
          streakDays: 5,
          level: 2
        }),
        'guest_searchHistory': JSON.stringify([
          { word: 'hello', timestamp: Date.now() }
        ]),
        'guest_shows': JSON.stringify([
          { id: 1, name: 'Test Show', words: ['hello', 'world'] }
        ]),
        'guest_experienceGain': '150',
        'guest_experienceEvents': JSON.stringify([
          { type: 'word_learned', xp: 10, timestamp: Date.now() }
        ]),
        'guest_wordbooks': JSON.stringify([
          { id: 1, name: 'Test Book', words: ['hello'] }
        ]),
        'guest_badges': JSON.stringify([
          { id: 'first_word', name: 'First Word', unlocked: true }
        ]),
        'guest_userSettings': JSON.stringify({
          language: 'en',
          notifications: true
        }),
        
        // 游客配置
        'guestConfig': JSON.stringify({
          guestId: 'test_guest_123',
          createdAt: Date.now()
        }),
        'guestData': JSON.stringify({
          totalSize: 1024,
          lastActive: Date.now()
        }),
        'guestMode': 'true',
        'autoGeneratedGuestId': 'test_guest_123',
        
        // 游客同步数据
        'guest_syncQueue': JSON.stringify([]),
        'guest_localDataVersions': JSON.stringify({}),
        'guest_lastSyncTime': Date.now().toString(),
        
        // 游客缓存
        'guest_wordDataCache': JSON.stringify({}),
        'guest_searchCache': JSON.stringify({}),
        'guest_showCache': JSON.stringify({}),
        
        // 游客临时数据
        'guest_tempData': JSON.stringify({ temp: 'data' }),
        'guest_backupData': JSON.stringify({ backup: 'data' }),
        'guest_migrationData': JSON.stringify({ migration: 'data' }),
        
        // 游客ID相关
        'guestId': 'test_guest_123',
        'cachedGuestId': 'test_guest_123',
        'lastGuestId': 'test_guest_123',
        'guestIdTimestamp': Date.now().toString(),
        'guestIdGenerated': 'true'
      };

      // 保存测试数据
      const entries = Object.entries(testData);
      for (const [key, value] of entries) {
        await AsyncStorage.setItem(key, value);
      }

      console.log(`[GuestDataCleanupTest] ✅ 已创建 ${entries.length} 个测试数据项`);
      
    } catch (error) {
      console.error('[GuestDataCleanupTest] ❌ 创建测试数据失败:', error);
      throw error;
    }
  }

  /**
   * 验证游客数据是否存在
   */
  public async verifyGuestDataExists(): Promise<{
    exists: boolean;
    count: number;
    keys: string[];
  }> {
    try {
      const allKeys = await AsyncStorage.getAllKeys();
      const guestKeys = allKeys.filter(key => 
        key.startsWith('guest_') || 
        key.includes('guest') ||
        key === 'guestConfig' ||
        key === 'guestData' ||
        key === 'guestMode' ||
        key === 'autoGeneratedGuestId' ||
        key === 'guestId' ||
        key === 'cachedGuestId' ||
        key === 'lastGuestId' ||
        key === 'guestIdTimestamp' ||
        key === 'guestIdGenerated'
      );

      return {
        exists: guestKeys.length > 0,
        count: guestKeys.length,
        keys: guestKeys
      };
      
    } catch (error) {
      console.error('[GuestDataCleanupTest] ❌ 验证游客数据失败:', error);
      return {
        exists: false,
        count: 0,
        keys: []
      };
    }
  }

  /**
   * 测试清理功能
   */
  public async testCleanupFunction(): Promise<{
    success: boolean;
    beforeCount: number;
    afterCount: number;
    message: string;
  }> {
    try {
      console.log('[GuestDataCleanupTest] 🧪 开始测试清理功能...');
      
      // 1. 创建测试数据
      await this.createTestGuestData();
      
      // 2. 验证数据存在
      const beforeVerification = await this.verifyGuestDataExists();
      console.log(`[GuestDataCleanupTest] 📊 清理前游客数据: ${beforeVerification.count} 项`);
      
      // 3. 执行清理
      const cleanupResult = await guestUpgradeService.clearGuestDataManually();
      
      // 4. 验证清理结果
      const afterVerification = await this.verifyGuestDataExists();
      console.log(`[GuestDataCleanupTest] 📊 清理后游客数据: ${afterVerification.count} 项`);
      
      const success = cleanupResult.success && afterVerification.count === 0;
      
      return {
        success,
        beforeCount: beforeVerification.count,
        afterCount: afterVerification.count,
        message: success 
          ? `✅ 清理测试成功！清理了 ${beforeVerification.count} 项数据`
          : `❌ 清理测试失败！清理前: ${beforeVerification.count} 项，清理后: ${afterVerification.count} 项`
      };
      
    } catch (error) {
      console.error('[GuestDataCleanupTest] ❌ 测试清理功能失败:', error);
      return {
        success: false,
        beforeCount: 0,
        afterCount: 0,
        message: `❌ 测试失败: ${error instanceof Error ? error.message : '未知错误'}`
      };
    }
  }

  /**
   * 运行完整的清理测试套件
   */
  public async runFullTestSuite(): Promise<{
    success: boolean;
    results: Array<{
      testName: string;
      success: boolean;
      message: string;
    }>;
  }> {
    try {
      console.log('[GuestDataCleanupTest] 🧪 开始运行完整测试套件...');
      
      const results: Array<{
        testName: string;
        success: boolean;
        message: string;
      }> = [];

      // 测试1: 创建测试数据
      try {
        await this.createTestGuestData();
        results.push({
          testName: '创建测试数据',
          success: true,
          message: '✅ 测试数据创建成功'
        });
      } catch (error) {
        results.push({
          testName: '创建测试数据',
          success: false,
          message: `❌ 测试数据创建失败: ${error instanceof Error ? error.message : '未知错误'}`
        });
      }

      // 测试2: 验证数据存在
      try {
        const verification = await this.verifyGuestDataExists();
        results.push({
          testName: '验证数据存在',
          success: verification.exists,
          message: verification.exists 
            ? `✅ 找到 ${verification.count} 项游客数据`
            : '❌ 未找到游客数据'
        });
      } catch (error) {
        results.push({
          testName: '验证数据存在',
          success: false,
          message: `❌ 验证失败: ${error instanceof Error ? error.message : '未知错误'}`
        });
      }

      // 测试3: 清理功能
      try {
        const cleanupTest = await this.testCleanupFunction();
        results.push({
          testName: '清理功能测试',
          success: cleanupTest.success,
          message: cleanupTest.message
        });
      } catch (error) {
        results.push({
          testName: '清理功能测试',
          success: false,
          message: `❌ 清理测试失败: ${error instanceof Error ? error.message : '未知错误'}`
        });
      }

      const overallSuccess = results.every(result => result.success);
      
      console.log('[GuestDataCleanupTest] 📋 测试套件完成:', {
        overallSuccess,
        totalTests: results.length,
        passedTests: results.filter(r => r.success).length,
        failedTests: results.filter(r => !r.success).length
      });

      return {
        success: overallSuccess,
        results
      };
      
    } catch (error) {
      console.error('[GuestDataCleanupTest] ❌ 运行测试套件失败:', error);
      return {
        success: false,
        results: [{
          testName: '测试套件',
          success: false,
          message: `❌ 测试套件失败: ${error instanceof Error ? error.message : '未知错误'}`
        }]
      };
    }
  }
}

export const guestDataCleanupTest = GuestDataCleanupTest.getInstance();
