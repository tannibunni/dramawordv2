import React, { useEffect, useState } from 'react';
import { View, Text } from 'react-native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import MainLayout from './components/navigation/MainLayout';
import { ShowListProvider } from './context/ShowListContext';
import { VocabularyProvider } from './context/VocabularyContext';
import { AuthProvider, useAuth } from './context/AuthContext';
import { LanguageProvider } from './context/LanguageContext';
import { AppLanguageProvider } from './context/AppLanguageContext';
import { Audio } from 'expo-av';
import { InterruptionModeIOS, InterruptionModeAndroid } from 'expo-av/build/Audio.types';
import { InitialLanguageModal } from './components/common/InitialLanguageModal';
import { LoginScreen } from './screens/Auth/LoginScreen';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Device from 'expo-device';

// 内部组件：移除自动通知初始化
const AppContent = () => {
  const [showInitialLanguageModal, setShowInitialLanguageModal] = useState(false);
  const [showLoginScreen, setShowLoginScreen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const { isAuthenticated, user, login } = useAuth();

  useEffect(() => {
    initializeApp();
  }, []);

  const initializeApp = async () => {
    try {
      setIsLoading(true);
      
      // 检查初始语言设置
      await checkInitialLanguageSetup();
      
      // 清理可能的共享数据
      await clearSharedDataOnStartup();
      
      // 检查认证状态
      await checkAuthenticationStatus();
      
    } catch (error) {
      console.error('❌ 应用初始化失败:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const checkAuthenticationStatus = async () => {
    try {
      // 检查是否有有效的用户数据
      const userData = await AsyncStorage.getItem('userData');
      if (!userData) {
        console.log('🔍 没有用户数据，显示登录界面');
        setShowLoginScreen(true);
        return;
      }

      const parsedUserData = JSON.parse(userData);
      
      // 检查是否有有效的token
      if (!parsedUserData.token) {
        console.log('🔍 没有有效token，显示登录界面');
        setShowLoginScreen(true);
        return;
      }

      // 检查是否是自动生成的游客ID且没有token
      if (parsedUserData.isAutoGenerated && !parsedUserData.token) {
        console.log('🔍 自动生成的游客ID没有token，显示登录界面');
        setShowLoginScreen(true);
        return;
      }

      console.log('✅ 用户已认证，直接进入主界面');
      setShowLoginScreen(false);
    } catch (error) {
      console.error('❌ 检查认证状态失败:', error);
      setShowLoginScreen(true);
    }
  };

  const checkInitialLanguageSetup = async () => {
    try {
      const hasSetup = await AsyncStorage.getItem('initialLanguageSetup');
      if (!hasSetup) {
        setShowInitialLanguageModal(true);
      }
    } catch (error) {
      console.error('检查初始语言设置失败:', error);
      setShowInitialLanguageModal(true);
    }
  };

  const clearSharedDataOnStartup = async () => {
    try {
      console.log('🚀 应用启动时清理共享数据...');
      
      // 检查是否有用户数据
      const userData = await AsyncStorage.getItem('userData');
      if (!userData) {
        // 如果没有用户数据，清理可能存在的共享数据
        const keysToRemove = [
          'searchHistory',
          'vocabulary',
          'learningRecords',
          'userStats',
          'badges'
        ];
        
        await AsyncStorage.multiRemove(keysToRemove);
        console.log('✅ 启动时共享数据清理完成');
      }
    } catch (error) {
      console.error('❌ 启动时清理共享数据失败:', error);
    }
  };



  const handleInitialLanguageComplete = () => {
    setShowInitialLanguageModal(false);
  };

  const handleLoginSuccess = async (userData: any) => {
    try {
      console.log('🔐 登录成功，用户数据:', userData);
      
      // 使用AuthContext的login方法
      await login(userData, userData.loginType || 'guest');
      
      // 隐藏登录界面
      setShowLoginScreen(false);
      
      console.log('✅ 登录流程完成，进入主界面');
    } catch (error) {
      console.error('❌ 登录成功处理失败:', error);
    }
  };

  const handleGuestLogin = async () => {
    try {
      console.log('👤 游客登录...');
      
      // 生成游客ID
      const now = Date.now().toString();
      const random = Math.random().toString(36).substr(2, 4);
      const deviceId = Device.deviceName || Device.modelName || 'unknown';
      const deviceHash = deviceId.split('').reduce((a, b) => a + b.charCodeAt(0), 0).toString(36).slice(-3);
      const guestId = now.slice(-6) + random + deviceHash;
      
      // 调用后端API注册游客用户并获取JWT令牌
      try {
        const registerData = {
          loginType: 'guest',
          username: `t_guest_${guestId}`.slice(0, 20),
          nickname: guestId,
          guestId: guestId,
        };

        const response = await fetch('https://dramawordv2.onrender.com/api/users/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(registerData),
        });

        if (response.ok) {
          const result = await response.json();
          console.log('✅ 游客注册成功，获得JWT令牌');
          
          const userData = {
            id: result.data.user.id,
            nickname: result.data.user.nickname,
            loginType: 'guest',
            token: result.data.token,
            isAutoGenerated: false
          };

          await handleLoginSuccess(userData);
        } else {
          console.warn('⚠️ 游客注册失败，使用本地模式');
          const userData = {
            id: guestId,
            nickname: guestId,
            loginType: 'guest',
            token: null,
            isAutoGenerated: false
          };
          await handleLoginSuccess(userData);
        }
      } catch (error) {
        console.warn('⚠️ 网络错误，使用本地模式:', error);
        const userData = {
          id: guestId,
          nickname: guestId,
          loginType: 'guest',
          token: null,
          isAutoGenerated: false
        };
        await handleLoginSuccess(userData);
      }
    } catch (error) {
      console.error('❌ 游客登录失败:', error);
    }
  };

  // 如果正在加载，显示加载状态
  if (isLoading) {
    return (
      <AuthProvider>
        <LanguageProvider>
          <ShowListProvider>
            <VocabularyProvider>
              <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#fff' }}>
                <Text>正在加载...</Text>
              </View>
            </VocabularyProvider>
          </ShowListProvider>
        </LanguageProvider>
      </AuthProvider>
    );
  }

  // 如果需要显示登录界面
  if (showLoginScreen) {
    return (
      <AuthProvider>
        <LanguageProvider>
          <ShowListProvider>
            <VocabularyProvider>
              <LoginScreen
                onLoginSuccess={handleLoginSuccess}
                onGuestLogin={handleGuestLogin}
              />
              <InitialLanguageModal
                visible={showInitialLanguageModal}
                onComplete={handleInitialLanguageComplete}
              />
            </VocabularyProvider>
          </ShowListProvider>
        </LanguageProvider>
      </AuthProvider>
    );
  }

  // 正常显示主界面
  return (
    <AuthProvider>
      <LanguageProvider>
        <ShowListProvider>
          <VocabularyProvider>
            <MainLayout />
            <InitialLanguageModal
              visible={showInitialLanguageModal}
              onComplete={handleInitialLanguageComplete}
            />
          </VocabularyProvider>
        </ShowListProvider>
      </LanguageProvider>
    </AuthProvider>
  );
};

export default function App() {
  useEffect(() => {
    // 设置音频模式，确保 iOS 静音拨片下也能播放
    Audio.setAudioModeAsync({
      allowsRecordingIOS: false,
      staysActiveInBackground: false,
      interruptionModeIOS: InterruptionModeIOS.DoNotMix,
      playsInSilentModeIOS: true, // 关键设置
      shouldDuckAndroid: true,
      interruptionModeAndroid: InterruptionModeAndroid.DoNotMix,
      playThroughEarpieceAndroid: false,
    });
  }, []);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <AppLanguageProvider>
        <AppContent />
      </AppLanguageProvider>
    </GestureHandlerRootView>
  );
} 