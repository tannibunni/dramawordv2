import React, { useEffect, useState } from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import MainLayout from './components/navigation/MainLayout';
import { ShowListProvider } from './context/ShowListContext';
import { VocabularyProvider } from './context/VocabularyContext';
import { AuthProvider } from './context/AuthContext';
import { LanguageProvider } from './context/LanguageContext';
import { AppLanguageProvider } from './context/AppLanguageContext';
import { Audio } from 'expo-av';
import { InterruptionModeIOS, InterruptionModeAndroid } from 'expo-av/build/Audio.types';
import { InitialLanguageModal } from './components/common/InitialLanguageModal';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Device from 'expo-device';

// 内部组件：移除自动通知初始化
const AppContent = () => {
  const [showInitialLanguageModal, setShowInitialLanguageModal] = useState(false);

  useEffect(() => {
    checkInitialLanguageSetup();
    // 清理可能的共享数据
    clearSharedDataOnStartup();
    // 自动生成游客ID
    autoGenerateGuestId();
  }, []);

  const checkInitialLanguageSetup = async () => {
    try {
      const hasSetup = await AsyncStorage.getItem('initialLanguageSetup');
      if (!hasSetup) {
        setShowInitialLanguageModal(true);
      }
    } catch (error) {
      console.error('检查初始语言设置失败:', error);
      setShowInitialLanguageModal(true);
    }
  };

  const clearSharedDataOnStartup = async () => {
    try {
      console.log('🚀 应用启动时清理共享数据...');
      
      // 检查是否有用户数据
      const userData = await AsyncStorage.getItem('userData');
      if (!userData) {
        // 如果没有用户数据，清理可能存在的共享数据
        const keysToRemove = [
          'searchHistory',
          'vocabulary',
          'learningRecords',
          'userStats',
          'badges'
        ];
        
        await AsyncStorage.multiRemove(keysToRemove);
        console.log('✅ 启动时共享数据清理完成');
      }
    } catch (error) {
      console.error('❌ 启动时清理共享数据失败:', error);
    }
  };

  // 自动生成游客用户ID
  const autoGenerateGuestId = async () => {
    try {
      console.log('🔍 检查是否需要自动生成游客ID...');
      
      // 检查是否已有用户数据
      const userData = await AsyncStorage.getItem('userData');
      if (userData) {
        console.log('✅ 用户数据已存在，跳过自动生成');
        return;
      }

      // 检查是否已设置过自动生成标记
      const hasAutoGenerated = await AsyncStorage.getItem('autoGeneratedGuestId');
      if (hasAutoGenerated) {
        console.log('✅ 已自动生成过游客ID，跳过');
        return;
      }

      console.log('🚀 开始自动生成游客ID...');
      
      // 生成唯一的游客ID
      const now = Date.now().toString();
      const random = Math.random().toString(36).substr(2, 4);
      const deviceId = Device.deviceName || Device.modelName || 'unknown';
      const deviceHash = deviceId.split('').reduce((a, b) => a + b.charCodeAt(0), 0).toString(36).slice(-3);
      const guestId = now.slice(-6) + random + deviceHash;
      
      // 创建临时用户数据
      const tempUserData = {
        id: guestId,
        nickname: guestId,
        loginType: 'guest',
        token: null, // 暂时没有token，需要用户手动登录获取
        isAutoGenerated: true
      };

      // 保存到本地存储
      await AsyncStorage.setItem('userData', JSON.stringify(tempUserData));
      await AsyncStorage.setItem('autoGeneratedGuestId', 'true');
      
      console.log('✅ 自动生成游客ID成功:', guestId);
    } catch (error) {
      console.error('❌ 自动生成游客ID失败:', error);
    }
  };

  const handleInitialLanguageComplete = () => {
    setShowInitialLanguageModal(false);
  };

  return (
    <AuthProvider>
      <LanguageProvider>
        <ShowListProvider>
          <VocabularyProvider>
            <MainLayout />
            <InitialLanguageModal
              visible={showInitialLanguageModal}
              onComplete={handleInitialLanguageComplete}
            />
          </VocabularyProvider>
        </ShowListProvider>
      </LanguageProvider>
    </AuthProvider>
  );
};

export default function App() {
  useEffect(() => {
    // 设置音频模式，确保 iOS 静音拨片下也能播放
    Audio.setAudioModeAsync({
      allowsRecordingIOS: false,
      staysActiveInBackground: false,
      interruptionModeIOS: InterruptionModeIOS.DoNotMix,
      playsInSilentModeIOS: true, // 关键设置
      shouldDuckAndroid: true,
      interruptionModeAndroid: InterruptionModeAndroid.DoNotMix,
      playThroughEarpieceAndroid: false,
    });
  }, []);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <AppLanguageProvider>
        <AppContent />
      </AppLanguageProvider>
    </GestureHandlerRootView>
  );
} 