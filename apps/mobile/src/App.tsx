import React, { useEffect, useState } from 'react';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import MainLayout from './components/navigation/MainLayout';
import { ShowListProvider } from './context/ShowListContext';
import { VocabularyProvider } from './context/VocabularyContext';
import { AuthProvider } from './context/AuthContext';
import { LanguageProvider } from './context/LanguageContext';
import { AppLanguageProvider } from './context/AppLanguageContext';
import { Audio } from 'expo-av';
import { InterruptionModeIOS, InterruptionModeAndroid } from 'expo-av/build/Audio.types';
import { InitialLanguageModal } from './components/common/InitialLanguageModal';
import { ReauthModal } from './components/auth/ReauthModal';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Device from 'expo-device';
import { unifiedSyncService } from './services/unifiedSyncService';
import { experienceManager } from './services/experienceManager';
import { guestModeService } from './services/guestModeService';
import { tokenValidationService } from './services/tokenValidationService';

// 内部组件：移除自动通知初始化
const AppContent = () => {
  const [showInitialLanguageModal, setShowInitialLanguageModal] = useState(false);
  const [showReauthModal, setShowReauthModal] = useState(false);
  const [reauthReason, setReauthReason] = useState('登录已过期，请重新登录');

  useEffect(() => {
    initializeApp();
  }, []);

  const initializeApp = async () => {
    try {
      console.log('🚀 应用初始化开始...');
      
      // 1. 检查初始语言设置
      await checkInitialLanguageSetup();
      
      // 2. 清理可能的共享数据
      await clearSharedDataOnStartup();
      
      // 3. 自动生成游客ID
      await autoGenerateGuestId();
      
      // 4. 初始化统一同步服务
      await initializeUnifiedSync();
      
      // 5. 初始化经验值管理器
      await initializeExperienceManager();
      
      // 6. 设置重新认证回调
      setupReauthCallback();
      
      console.log('✅ 应用初始化完成');
    } catch (error) {
      console.error('❌ 应用初始化失败:', error);
    }
  };

  const initializeUnifiedSync = async () => {
    try {
      console.log('🔄 初始化统一同步服务...');
      
      // 迁移旧同步数据
      await unifiedSyncService.migrateOldSyncData();
      
      // 配置同步服务
      unifiedSyncService.updateConfig({
        wifiSyncInterval: 2 * 60 * 1000, // 2分钟
        mobileSyncInterval: 5 * 60 * 1000, // 5分钟
        enableRealTimeSync: true,
        enableOfflineFirst: true
      });
      
      console.log('✅ 统一同步服务初始化完成');
    } catch (error) {
      console.error('❌ 统一同步服务初始化失败:', error);
    }
  };

  const initializeExperienceManager = async () => {
    try {
      console.log('⭐ 初始化经验值管理器...');
      
      // 配置经验值管理器
      experienceManager.updateConfig({
        enableAnimations: true,
        enableNotifications: true,
        enableSound: true,
        autoSync: true
      });
      
      console.log('✅ 经验值管理器初始化完成');
    } catch (error) {
      console.error('❌ 经验值管理器初始化失败:', error);
    }
  };

  const checkInitialLanguageSetup = async () => {
    try {
      const hasSetup = await AsyncStorage.getItem('initialLanguageSetup');
      if (!hasSetup) {
        setShowInitialLanguageModal(true);
      }
    } catch (error) {
      console.error('检查初始语言设置失败:', error);
      setShowInitialLanguageModal(true);
    }
  };

  const clearSharedDataOnStartup = async () => {
    try {
      console.log('🚀 应用启动时清理共享数据...');
      
      // 检查是否有用户数据
      const userData = await AsyncStorage.getItem('userData');
      if (!userData) {
        // 如果没有用户数据，清理可能存在的共享数据
        const keysToRemove = [
          'searchHistory',
          'vocabulary',
          'learningRecords',
          'userStats',
          'badges'
        ];
        
        await AsyncStorage.multiRemove(keysToRemove);
        console.log('✅ 启动时共享数据清理完成');
      }
    } catch (error) {
      console.error('❌ 启动时清理共享数据失败:', error);
    }
  };

  // 自动生成游客用户ID
  const autoGenerateGuestId = async () => {
    try {
      console.log('🔍 检查是否需要自动生成游客ID...');
      
      // 检查是否已有用户数据
      const userData = await AsyncStorage.getItem('userData');
      if (userData) {
        console.log('✅ 用户数据已存在，跳过自动生成');
        return;
      }

      // 检查是否已设置过自动生成标记
      const hasAutoGenerated = await AsyncStorage.getItem('autoGeneratedGuestId');
      if (hasAutoGenerated) {
        console.log('✅ 已自动生成过游客ID，跳过');
        return;
      }

      console.log('🚀 开始自动生成游客ID...');
      
      // 生成唯一的游客ID
      const now = Date.now().toString();
      const random = Math.random().toString(36).substr(2, 4);
      const deviceId = Device.deviceName || Device.modelName || 'unknown';
      const deviceHash = deviceId.split('').reduce((a, b) => a + b.charCodeAt(0), 0).toString(36).slice(-3);
      const guestId = now.slice(-6) + random + deviceHash;
      
      console.log('🔄 正在为游客ID获取JWT令牌...');
      
      // 调用后端API注册游客用户并获取JWT令牌
      try {
        const registerData = {
          loginType: 'guest',
          username: `t_guest_${guestId}`.slice(0, 20),
          nickname: guestId,
          guestId: guestId,
        };

        const response = await fetch('https://dramawordv2.onrender.com/api/users/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(registerData),
        });

        if (response.ok) {
          const result = await response.json();
          console.log('✅ 游客注册成功，获得JWT令牌');
          
          // 保存完整的用户数据（包含JWT令牌）
          const completeUserData = {
            id: result.data.user.id,
            nickname: result.data.user.nickname,
            loginType: 'guest',
            token: result.data.token, // 现在有了真正的JWT令牌
            isAutoGenerated: true
          };

          await AsyncStorage.setItem('userData', JSON.stringify(completeUserData));
          await AsyncStorage.setItem('autoGeneratedGuestId', 'true');
          
          console.log('✅ 自动生成游客ID并获取令牌成功:', guestId);
        } else {
          console.warn('⚠️ 游客注册失败，使用本地ID模式');
          // 如果注册失败，仍然保存本地ID（无令牌模式）
          const tempUserData = {
            id: guestId,
            nickname: guestId,
            loginType: 'guest',
            token: null,
            isAutoGenerated: true,
            createdAt: Date.now(),
            localDataVersion: 1
          };

          await AsyncStorage.setItem('userData', JSON.stringify(tempUserData));
          await AsyncStorage.setItem('autoGeneratedGuestId', 'true');
          
          // 初始化游客模式服务
          await guestModeService.isGuestMode();
        }
      } catch (error) {
        console.warn('⚠️ 网络错误，使用本地ID模式:', error);
        // 网络错误时，仍然保存本地ID（无令牌模式）
        const tempUserData = {
          id: guestId,
          nickname: guestId,
          loginType: 'guest',
          token: null,
          isAutoGenerated: true,
          createdAt: Date.now(),
          localDataVersion: 1
        };

        await AsyncStorage.setItem('userData', JSON.stringify(tempUserData));
        await AsyncStorage.setItem('autoGeneratedGuestId', 'true');
        
        // 初始化游客模式服务
        await guestModeService.isGuestMode();
      }
    } catch (error) {
      console.error('❌ 自动生成游客ID失败:', error);
    }
  };

  const setupReauthCallback = () => {
    // 注册重新认证回调
    tokenValidationService.onReauthRequired(() => {
      console.log('🔄 显示重新认证弹窗');
      setReauthReason('登录已过期，请重新登录');
      setShowReauthModal(true);
    });
  };

  const handleReauthSuccess = () => {
    console.log('✅ 重新认证成功');
    setShowReauthModal(false);
  };

  const handleReauthClose = () => {
    console.log('❌ 用户取消重新认证');
    setShowReauthModal(false);
  };

  const handleInitialLanguageComplete = () => {
    setShowInitialLanguageModal(false);
  };

  return (
    <AuthProvider>
      <LanguageProvider>
        <ShowListProvider>
          <VocabularyProvider>
            <MainLayout />
            <InitialLanguageModal
              visible={showInitialLanguageModal}
              onComplete={handleInitialLanguageComplete}
            />
            <ReauthModal
              visible={showReauthModal}
              onClose={handleReauthClose}
              onLoginSuccess={handleReauthSuccess}
              reason={reauthReason}
            />
          </VocabularyProvider>
        </ShowListProvider>
      </LanguageProvider>
    </AuthProvider>
  );
};

export default function App() {
  useEffect(() => {
    // 设置音频模式，确保 iOS 静音拨片下也能播放
    Audio.setAudioModeAsync({
      allowsRecordingIOS: false,
      staysActiveInBackground: false,
      interruptionModeIOS: InterruptionModeIOS.DoNotMix,
      playsInSilentModeIOS: true, // 关键设置
      shouldDuckAndroid: true,
      interruptionModeAndroid: InterruptionModeAndroid.DoNotMix,
      playThroughEarpieceAndroid: false,
    });
  }, []);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <AppLanguageProvider>
        <AppContent />
      </AppLanguageProvider>
    </GestureHandlerRootView>
  );
} 