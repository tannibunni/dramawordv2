import mongoose from 'mongoose';
import { logger } from '../utils/logger';

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/dramaword';

export const connectDatabase = async (): Promise<void> => {
  try {
    // ‰ºòÂåñËøûÊé•ÈÖçÁΩÆ
    const mongooseOptions = {
      maxPoolSize: 10,                    // ÊúÄÂ§ßËøûÊé•Ê±†Â§ßÂ∞è
      serverSelectionTimeoutMS: 5000,     // ÊúçÂä°Âô®ÈÄâÊã©Ë∂ÖÊó∂
      socketTimeoutMS: 45000,             // SocketË∂ÖÊó∂
      bufferCommands: false,              // Á¶ÅÁî®ÂëΩ‰ª§ÁºìÂÜ≤
      maxIdleTimeMS: 30000,              // ÊúÄÂ§ßÁ©∫Èó≤Êó∂Èó¥
      retryWrites: true,                 // ÂêØÁî®ÈáçËØïÂÜôÂÖ•
      retryReads: true,                  // ÂêØÁî®ÈáçËØïËØªÂèñ
      compressors: ['zlib'] as ('zlib' | 'none' | 'snappy' | 'zstd')[],    // ÂêØÁî®ÂéãÁº©
      zlibCompressionLevel: 6 as 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9,           // ÂéãÁº©Á∫ßÂà´
      heartbeatFrequencyMS: 10000,       // ÂøÉË∑≥È¢ëÁéá
      maxConnecting: 2,                  // ÊúÄÂ§ßËøûÊé•‰∏≠Êï∞Èáè
      minPoolSize: 2                     // ÊúÄÂ∞èËøûÊé•Ê±†Â§ßÂ∞è
    };

    await mongoose.connect(MONGODB_URI, mongooseOptions);
    logger.info('‚úÖ MongoDB connected successfully with optimized connection pool');
    
    // ÁõëÂê¨ËøûÊé•‰∫ã‰ª∂
    mongoose.connection.on('error', (error) => {
      logger.error('‚ùå MongoDB connection error:', error);
    });
    
    mongoose.connection.on('disconnected', () => {
      logger.warn('‚ö†Ô∏è MongoDB disconnected');
    });

    // ËøûÊé•Ê±†ÁõëÊéß
    mongoose.connection.on('connected', () => {
      logger.info('üîó MongoDB connected');
    });

    mongoose.connection.on('reconnected', () => {
      logger.info('üîÑ MongoDB reconnected');
    });

    // ÂÆöÊúüÁõëÊéßËøûÊé•Ê±†Áä∂ÊÄÅ
    setInterval(() => {
      const connectionState = mongoose.connection.readyState;
      const connectionStates = {
        0: 'disconnected',
        1: 'connected',
        2: 'connecting',
        3: 'disconnecting'
      };
      
      logger.info(`üìä MongoDB connection state: ${connectionStates[connectionState]}`);
      
      // ËÆ∞ÂΩïËøûÊé•Ê±†ÁªüËÆ°‰ø°ÊÅØ
      if (mongoose.connection.db) {
        mongoose.connection.db.admin().serverStatus()
          .then((status) => {
            logger.info(`üìà MongoDB server status - Connections: ${status.connections?.current || 'N/A'}`);
          })
          .catch((error) => {
            logger.warn('‚ö†Ô∏è Failed to get server status:', error.message);
          });
      }
    }, 60000); // ÊØèÂàÜÈíüÊ£ÄÊü•‰∏ÄÊ¨°
    
    // ‰ºòÈõÖÂÖ≥Èó≠
    process.on('SIGINT', async () => {
      await mongoose.connection.close();
      logger.info('üì¥ MongoDB connection closed through app termination');
      process.exit(0);
    });
    
  } catch (error) {
    logger.error('‚ùå Failed to connect to MongoDB:', error);
    process.exit(1);
  }
};

export const disconnectDatabase = async (): Promise<void> => {
  try {
    await mongoose.connection.close();
    logger.info('üì¥ MongoDB disconnected');
  } catch (error) {
    logger.error('‚ùå Error disconnecting from MongoDB:', error);
  }
}; 